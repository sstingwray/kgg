{"version":3,"file":"expand-full.js","sources":["../node_modules/@emmetio/output-profile/dist/output-profile.es.js","../node_modules/@emmetio/snippets-registry/dist/snippets-registry.es.js","../node_modules/@emmetio/stream-reader-utils/dist/stream-reader-utils.es.js","../node_modules/@emmetio/node/dist/node.es.js","../node_modules/@emmetio/stream-reader/dist/stream-reader.es.js","../node_modules/@emmetio/abbreviation/dist/abbreviation.es.js","../node_modules/@emmetio/html-snippets-resolver/node_modules/@emmetio/abbreviation/dist/abbreviation.es.js","../node_modules/@emmetio/html-snippets-resolver/dist/html-snippets-resolver.es.js","../node_modules/@emmetio/implicit-tag/dist/implicit-tag.es.js","../node_modules/@emmetio/html-transform/dist/html-transform.es.js","../node_modules/@emmetio/variable-resolver/dist/variable-resolver.es.js","../node_modules/@emmetio/field-parser/dist/field-parser.es.js","../node_modules/@emmetio/output-renderer/dist/output-renderer.es.js","../node_modules/@emmetio/markup-formatters/dist/markup-formatters.es.js","../lib/html.js","../node_modules/@emmetio/css-abbreviation/dist/css-abbreviation.es.js","../node_modules/@emmetio/css-snippets-resolver/dist/css-snippets-resolver.es.js","../node_modules/@emmetio/stylesheet-formatters/dist/stylesheet-formatters.es.js","../lib/css.js","../node_modules/@emmetio/snippets/dist/snippets.es.js","../node_modules/@emmetio/lorem/dist/lorem.es.js","../lib/snippets-registry.js","../index.js"],"sourcesContent":["/**\n * @type {EmmetOutputProfile}\n */\nvar defaultOptions = {\n\tindent: '\\t',\n\ttagCase: '',\n\tattributeCase: '',\n\tattributeQuotes: 'double',\n\tformat: true,\n\tformatSkip: ['html'],\n\tformatForce: ['body'],\n\tinlineBreak: 3,\n\tcompactBooleanAttributes: false,\n\tbooleanAttributes: ['contenteditable', 'seamless', 'async', 'autofocus',\n\t\t'autoplay', 'checked', 'controls', 'defer', 'disabled', 'formnovalidate',\n\t\t'hidden', 'ismap', 'loop', 'multiple', 'muted', 'novalidate', 'readonly',\n\t\t'required', 'reversed', 'selected', 'typemustmatch'],\n\tselfClosingStyle: 'html',\n\tinlineElements: ['a', 'abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo',\n\t\t'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i',\n\t\t'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q',\n\t\t's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup',\n\t\t'textarea', 'tt', 'u', 'var']\n};\n\n/**\n * Creates output profile for given options\n */\nclass Profile {\n\t/**\n\t * @param {EmmetOutputProfile} options \n\t */\n    constructor(options) {\n\t\t/** @type {EmmetOutputProfile} */\n\t\tthis.options = Object.assign({}, defaultOptions, options);\n\t\tthis.quoteChar = this.options.attributeQuotes === 'single' ? '\\'' : '\"';\n    }\n\n\t/**\n\t * Returns value of given option name\n\t * @param {String} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.options[name];\n\t}\n\n    /**\n     * Quote given string according to profile\n     * @param {String} str String to quote\n     * @return {String}\n     */\n    quote(str) {\n        return `${this.quoteChar}${str != null ? str : ''}${this.quoteChar}`;\n    }\n\n    /**\n     * Output given tag name according to options\n     * @param {String} name\n     * @return {String}\n     */\n    name(name) {\n        return strcase(name, this.options.tagCase);\n    }\n\n\t/**\n\t * Outputs attribute name according to current settings\n\t * @param {String} attr Attribute name\n\t * @return {String}\n\t */\n    attribute(attr) {\n        return strcase(attr, this.options.attributeCase);\n    }\n\n    /**\n     * Check if given attribute is boolean\n     * @param {Object} attr\n     * @return {Boolean}\n     */\n    isBooleanAttribute(attr) {\n        return attr.options.boolean\n\t\t\t|| this.get('booleanAttributes').indexOf((attr.name || '').toLowerCase()) !== -1;\n    }\n\n\t/**\n\t * Returns a token for self-closing tag, depending on current options\n\t * @return {String}\n\t */\n\tselfClose() {\n\t\tswitch (this.options.selfClosingStyle) {\n\t\t\tcase 'xhtml': return ' /';\n\t\t\tcase 'xml':   return '/';\n\t\t\tdefault:      return '';\n\t\t}\n\t}\n\n\t/**\n\t * Returns indent for given level\n\t * @param {Number} level Indentation level\n\t * @return {String}\n\t */\n\tindent(level) {\n\t\tlevel = level || 0;\n\t\tlet output = '';\n\t\twhile (level--) {\n\t\t\toutput += this.options.indent;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Check if given tag name belongs to inline-level element\n\t * @param {Object|String} node Parsed node or tag name\n\t * @return {Boolean}\n\t */\n\tisInline(node) {\n        if (typeof node === 'string') {\n            return this.get('inlineElements').indexOf(node.toLowerCase()) !== -1;\n        }\n\n        // inline node is a node either with inline-level name or text-only node\n        return node.name != null ? this.isInline(node.name) : node.isTextOnly;\n\t}\n\n\t/**\n\t * Outputs formatted field for given params\n\t * @param {Number} index Field index\n\t * @param {String} [placeholder] Field placeholder, can be empty\n\t * @return {String}\n\t */\n\tfield(index, placeholder) {\n\t\treturn this.options.field(index, placeholder);\n\t}\n}\nfunction strcase(string, type) {\n    if (type) {\n        return type === 'upper' ? string.toUpperCase() : string.toLowerCase();\n\t}\n\t\n    return string;\n}\n\nexport default Profile;\n","class Snippet {\n    constructor(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n}\n\nclass SnippetsStorage {\n    constructor(data) {\n        this._string = new Map();\n        this._regexp = new Map();\n        this._disabled = false;\n\n        this.load(data);\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    /**\n     * Disables current store. A disabled store always returns `undefined`\n     * on `get()` method\n     */\n    disable() {\n        this._disabled = true;\n    }\n\n    /**\n     * Enables current store.\n     */\n    enable() {\n        this._disabled = false;\n    }\n\n    /**\n     * Registers a new snippet item\n     * @param {String|Regexp} key\n     * @param {String|Function} value\n     */\n    set(key, value) {\n        if (typeof key === 'string') {\n            key.split('|').forEach(k => this._string.set(k, new Snippet(k, value)));\n        } else if (key instanceof RegExp) {\n            this._regexp.set(key, new Snippet(key, value));\n        } else {\n            throw new Error('Unknow snippet key: ' + key);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns a snippet matching given key. It first tries to find snippet\n     * exact match in a string key map, then tries to match one with regexp key\n     * @param {String} key\n     * @return {Snippet}\n     */\n    get(key) {\n        if (this.disabled) {\n            return undefined;\n        }\n\n        if (this._string.has(key)) {\n            return this._string.get(key);\n        }\n\n        const keys = Array.from(this._regexp.keys());\n        for (let i = 0, il = keys.length; i < il; i++) {\n            if (keys[i].test(key)) {\n                return this._regexp.get(keys[i]);\n            }\n        }\n    }\n\n    /**\n     * Batch load of snippets data\n     * @param {Object|Map} data\n     */\n    load(data) {\n        this.reset();\n        if (data instanceof Map) {\n            data.forEach((value, key) => this.set(key, value));\n        } else if (data && typeof data === 'object') {\n            Object.keys(data).forEach(key => this.set(key, data[key]));\n        }\n    }\n\n    /**\n     * Clears all stored snippets\n     */\n    reset() {\n        this._string.clear();\n        this._regexp.clear();\n    }\n\n    /**\n     * Returns all available snippets from given store\n     */\n    values() {\n        if (this.disabled) {\n            return [];\n        }\n        \n        const string = Array.from(this._string.values());\n        const regexp = Array.from(this._regexp.values());\n        return string.concat(regexp);\n    }\n}\n\n/**\n * A snippets registry. Contains snippets, separated by store and sorted by\n * priority: a store with higher priority takes precedence when resolving snippet\n * for given key\n */\nclass SnippetsRegistry {\n    /**\n     * Creates snippets registry, filled with given `data`\n     * @param {Object|Array} data Registry snippets. If array is given, adds items\n     * from array in order of precedence, registers global snippets otherwise\n     */\n    constructor(data) {\n        this._registry = [];\n\n        if (Array.isArray(data)) {\n            data.forEach((snippets, level) => this.add(level, snippets));\n        } else if (typeof data === 'object') {\n            this.add(data);\n        }\n    }\n\n    /**\n     * Return store for given level\n     * @param {Number} level\n     * @return {SnippetsStorage}\n     */\n    get(level) {\n        for (let i = 0; i < this._registry.length; i++) {\n            const item = this._registry[i];\n            if (item.level === level) {\n                return item.store;\n            }\n        }\n    }\n\n    /**\n     * Adds new store for given level\n     * @param {Number} [level] Store level (priority). Store with higher level\n     * takes precedence when resolving snippets\n     * @param {Object} [snippets] A snippets data for new store\n     * @return {SnipetsStorage}\n     */\n    add(level, snippets) {\n        if (level != null && typeof level === 'object') {\n            snippets = level;\n            level = 0;\n        }\n\n        const store = new SnippetsStorage(snippets);\n\n        // remove previous store from same level\n        this.remove(level);\n\n        this._registry.push({level, store});\n        this._registry.sort((a, b) => b.level - a.level);\n\n        return store;\n    }\n\n    /**\n     * Remove registry with given level or store\n     * @param {Number|SnippetsStorage} data Either level or snippets store\n     */\n    remove(data) {\n        this._registry = this._registry\n        .filter(item => item.level !== data && item.store !== data);\n    }\n\n    /**\n     * Returns snippet from registry that matches given name\n     * @param {String} name\n     * @return {Snippet}\n     */\n    resolve(name) {\n        for (let i = 0; i < this._registry.length; i++) {\n            const snippet = this._registry[i].store.get(name);\n            if (snippet) {\n                return snippet;\n            }\n        }\n    }\n\n    /**\n     * Returns all available snippets from current registry. Snippets with the\n     * same key are resolved by their storage priority.\n     * @param {Object} options\n     * @param {Object} options.type Return snippets only of given type: 'string'\n     * or 'regexp'. Returns all snippets if not defined\n     * @return {Array}\n     */\n    all(options) {\n        options = options || {};\n        const result = new Map();\n\n        const fillResult = snippet => {\n            const type = snippet.key instanceof RegExp ? 'regexp' : 'string';\n            if ((!options.type || options.type === type) && !result.has(snippet.key)) {\n                result.set(snippet.key, snippet);\n            }\n        };\n\n        this._registry.forEach(item => {\n            item.store.values().forEach(fillResult);\n        });\n\n        return Array.from(result.values());\n    }\n\n    /**\n     * Removes all stores from registry\n     */\n    clear() {\n        this._registry.length = 0;\n    }\n}\n\nexport default SnippetsRegistry;\n","/**\n * Methods for consuming quoted values\n */\n\nconst SINGLE_QUOTE = 39; // '\nconst DOUBLE_QUOTE = 34; // \"\n\nconst defaultOptions = {\n\tescape: 92,   // \\ character\n\tthrows: false\n};\n\n/**\n * Consumes 'single' or \"double\"-quoted string from given string, if possible\n * @param  {StreamReader} stream\n * @param  {Number}  options.escape A character code of quote-escape symbol\n * @param  {Boolean} options.throws Throw error if quotes string can’t be properly consumed\n * @return {Boolean} `true` if quoted string was consumed. The contents\n *                   of quoted string will be availabe as `stream.current()`\n */\nvar eatQuoted = function(stream, options) {\n\toptions = options ? Object.assign({}, defaultOptions, options) : defaultOptions;\n\tconst start = stream.pos;\n\tconst quote = stream.peek();\n\n\tif (stream.eat(isQuote)) {\n\t\twhile (!stream.eof()) {\n\t\t\tswitch (stream.next()) {\n\t\t\t\tcase quote:\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn true;\n\n\t\t\t\tcase options.escape:\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then stream wasn’t properly consumed.\n\t\t// Revert stream and decide what to do\n\t\tstream.pos = start;\n\n\t\tif (options.throws) {\n\t\t\tthrow stream.error('Unable to consume quoted string');\n\t\t}\n\t}\n\n\treturn false;\n};\n\nfunction isQuote(code) {\n\treturn code === SINGLE_QUOTE || code === DOUBLE_QUOTE;\n}\n\n/**\n * Check if given code is a number\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isNumber(code) {\n\treturn code > 47 && code < 58;\n}\n\n/**\n * Check if given character code is alpha code (letter through A to Z)\n * @param  {Number}  code\n * @param  {Number}  [from]\n * @param  {Number}  [to]\n * @return {Boolean}\n */\nfunction isAlpha(code, from, to) {\n\tfrom = from || 65; // A\n\tto   = to   || 90; // Z\n\tcode &= ~32; // quick hack to convert any char code to uppercase char code\n\n\treturn code >= from && code <= to;\n}\n\n/**\n * Check if given character code is alpha-numeric (letter through A to Z or number)\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaNumeric(code) {\n\treturn isNumber(code) || isAlpha(code);\n}\n\nfunction isWhiteSpace(code) {\n\treturn code === 32   /* space */\n\t\t|| code === 9    /* tab */\n\t\t|| code === 160; /* non-breaking space */\n}\n\n/**\n * Check if given character code is a space\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isSpace(code) {\n\treturn isWhiteSpace(code)\n\t\t|| code === 10  /* LF */\n\t\t|| code === 13; /* CR */\n}\n\nconst defaultOptions$1 = {\n\tescape: 92,   // \\ character\n\tthrows: false\n};\n\n/**\n * Eats paired characters substring, for example `(foo)` or `[bar]`\n * @param  {StreamReader} stream\n * @param  {Number} open      Character code of pair openinig\n * @param  {Number} close     Character code of pair closing\n * @param  {Object} [options]\n * @return {Boolean}       Returns `true` if chacarter pair was successfully\n *                         consumed, it’s content will be available as `stream.current()`\n */\nfunction eatPair(stream, open, close, options) {\n\toptions = options ? Object.assign({}, defaultOptions$1, options) : defaultOptions$1;\n\tconst start = stream.pos;\n\n\tif (stream.eat(open)) {\n\t\tlet stack = 1, ch;\n\n\t\twhile (!stream.eof()) {\n\t\t\tif (eatQuoted(stream, options)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tch = stream.next();\n\t\t\tif (ch === open) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === close) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if (ch === options.escape) {\n\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\n\t\tif (options.throws) {\n\t\t\tthrow stream.error(`Unable to find matching pair for ${String.fromCharCode(open)}`);\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport { eatQuoted, isQuote, isAlpha, isNumber, isAlphaNumeric, isSpace, isWhiteSpace, eatPair };\n","/**\n * Attribute descriptor of parsed abbreviation node\n * @param {String} name Attribute name\n * @param {String} value Attribute value\n * @param {Object} options Additional custom attribute options\n * @param {Boolean} options.boolean Attribute is boolean (e.g. name equals value)\n * @param {Boolean} options.implied Attribute is implied (e.g. must be outputted\n * only if contains non-null value)\n */\nclass Attribute {\n\tconstructor(name, value, options) {\n\t\tthis.name = name;\n\t\tthis.value = value != null ? value : null;\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Create a copy of current attribute\n\t * @return {Attribute}\n\t */\n\tclone() {\n\t\treturn new Attribute(this.name, this.value, Object.assign({}, this.options));\n\t}\n\n\t/**\n\t * A string representation of current node\n\t */\n\tvalueOf() {\n\t\treturn `${this.name}=\"${this.value}\"`;\n\t}\n}\n\n/**\n * A parsed abbreviation AST node. Nodes build up an abbreviation AST tree\n */\nclass Node {\n\t/**\n\t * Creates a new node\n\t * @param {String} [name] Node name\n\t * @param {Array} [attributes] Array of attributes to add\n\t */\n\tconstructor(name, attributes) {\n\t\t// own properties\n\t\tthis.name = name || null;\n\t\tthis.value = null;\n\t\tthis.repeat = null;\n\t\tthis.selfClosing = false;\n\n\t\tthis.children = [];\n\n\t\t/** @type {Node} Pointer to parent node */\n\t\tthis.parent = null;\n\n\t\t/** @type {Node} Pointer to next sibling */\n\t\tthis.next = null;\n\n\t\t/** @type {Node} Pointer to previous sibling */\n\t\tthis.previous = null;\n\n\t\tthis._attributes = [];\n\n\t\tif (Array.isArray(attributes)) {\n\t\t\tattributes.forEach(attr => this.setAttribute(attr));\n\t\t}\n\t}\n\n\t/**\n\t * Array of current node attributes\n\t * @return {Attribute[]} Array of attributes\n\t */\n\tget attributes() {\n\t\treturn this._attributes;\n\t}\n\n\t/**\n\t * A shorthand to retreive node attributes as map\n\t * @return {Object}\n\t */\n\tget attributesMap() {\n\t\treturn this.attributes.reduce((out, attr) => {\n\t\t\tout[attr.name] = attr.options.boolean ? attr.name : attr.value;\n\t\t\treturn out;\n\t\t}, {});\n\t}\n\n\t/**\n\t * Check if current node is a grouping one, e.g. has no actual representation\n\t * and is used for grouping subsequent nodes only\n\t * @return {Boolean}\n\t */\n\tget isGroup() {\n\t\treturn !this.name && !this.value && !this._attributes.length;\n\t}\n\n\t/**\n\t * Check if given node is a text-only node, e.g. contains only value\n\t * @return {Boolean}\n\t */\n\tget isTextOnly() {\n\t\treturn !this.name && !!this.value && !this._attributes.length;\n\t}\n\n\t/**\n\t * Returns first child node\n\t * @return {Node}\n\t */\n\tget firstChild() {\n\t\treturn this.children[0];\n\t}\n\n\t/**\n\t * Returns last child of current node\n\t * @return {Node}\n\t */\n\tget lastChild() {\n\t\treturn this.children[this.children.length - 1];\n\t}\n\n\t/**\n\t * Return index of current node in its parent child list\n\t * @return {Number} Returns -1 if current node is a root one\n\t */\n\tget childIndex() {\n\t\treturn this.parent ? this.parent.children.indexOf(this) : -1;\n\t}\n\n\t/**\n\t * Returns next sibling of current node\n\t * @return {Node}\n\t */\n\tget nextSibling() {\n\t\treturn this.next;\n\t}\n\n\t/**\n\t * Returns previous sibling of current node\n\t * @return {Node}\n\t */\n\tget previousSibling() {\n\t\treturn this.previous;\n\t}\n\n\t/**\n\t * Returns array of unique class names in current node\n\t * @return {String[]}\n\t */\n\tget classList() {\n\t\tconst attr = this.getAttribute('class');\n\t\treturn attr && attr.value\n\t\t\t? attr.value.split(/\\s+/g).filter(uniqueClass)\n\t\t\t: [];\n\t}\n\n\t/**\n\t * Convenient alias to create a new node instance\n\t * @param {String} [name] Node name\n\t * @param {Object} [attributes] Attributes hash\n\t * @return {Node}\n\t */\n\tcreate(name, attributes) {\n\t\treturn new Node(name, attributes);\n\t}\n\n\t/**\n\t * Sets given attribute for current node\n\t * @param {String|Object|Attribute} name Attribute name or attribute object\n\t * @param {String} [value] Attribute value\n\t */\n\tsetAttribute(name, value) {\n\t\tconst attr = createAttribute(name, value);\n\t\tconst curAttr = this.getAttribute(name);\n\t\tif (curAttr) {\n\t\t\tthis.replaceAttribute(curAttr, attr);\n\t\t} else {\n\t\t\tthis._attributes.push(attr);\n\t\t}\n\t}\n\n\t/**\n\t * Check if attribute with given name exists in node\n\t * @param  {String} name\n\t * @return {Boolean}\n\t */\n\thasAttribute(name) {\n\t\treturn !!this.getAttribute(name);\n\t}\n\n\t/**\n\t * Returns attribute object by given name\n\t * @param  {String} name\n\t * @return {Attribute}\n\t */\n\tgetAttribute(name) {\n\t\tif (typeof name === 'object') {\n\t\t\tname = name.name;\n\t\t}\n\n\t\tfor (var i = 0; i < this._attributes.length; i++) {\n\t\t\tconst attr = this._attributes[i];\n\t\t\tif (attr.name === name) {\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Replaces attribute with new instance\n\t * @param {String|Attribute} curAttribute Current attribute name or instance\n\t * to replace\n\t * @param {String|Object|Attribute} newName New attribute name or attribute object\n\t * @param {String} [newValue] New attribute value\n\t */\n\treplaceAttribute(curAttribute, newName, newValue) {\n\t\tif (typeof curAttribute === 'string') {\n\t\t\tcurAttribute = this.getAttribute(curAttribute);\n\t\t}\n\n\t\tconst ix = this._attributes.indexOf(curAttribute);\n\t\tif (ix !== -1) {\n\t\t\tthis._attributes.splice(ix, 1, createAttribute(newName, newValue));\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute with given name\n\t * @param  {String|Attribute} attr Atrtibute name or instance\n\t */\n\tremoveAttribute(attr) {\n\t\tif (typeof attr === 'string') {\n\t\t\tattr = this.getAttribute(attr);\n\t\t}\n\n\t\tconst ix = this._attributes.indexOf(attr);\n\t\tif (ix !== -1) {\n\t\t\tthis._attributes.splice(ix, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from current node\n\t */\n\tclearAttributes() {\n\t\tthis._attributes.length = 0;\n\t}\n\n\t/**\n\t * Adds given class name to class attribute\n\t * @param {String} token Class name token\n\t */\n\taddClass(token) {\n\t\ttoken = normalize(token);\n\n\t\tif (!this.hasAttribute('class')) {\n\t\t\tthis.setAttribute('class', token);\n\t\t} else if (token && !this.hasClass(token)) {\n\t\t\tthis.setAttribute('class', this.classList.concat(token).join(' '));\n\t\t}\n\t}\n\n\t/**\n\t * Check if current node contains given class name\n\t * @param {String} token Class name token\n\t * @return {Boolean}\n\t */\n\thasClass(token) {\n\t\treturn this.classList.indexOf(normalize(token)) !== -1;\n\t}\n\n\t/**\n\t * Removes given class name from class attribute\n\t * @param {String} token Class name token\n\t */\n\tremoveClass(token) {\n\t\ttoken = normalize(token);\n\t\tif (this.hasClass(token)) {\n\t\t\tthis.setAttribute('class', this.classList.filter(name => name !== token).join(' '));\n\t\t}\n\t}\n\n\t/**\n\t * Appends child to current node\n\t * @param {Node} node\n\t */\n\tappendChild(node) {\n\t\tthis.insertAt(node, this.children.length);\n\t}\n\n\t/**\n\t * Inserts given `newNode` before `refNode` child node\n\t * @param {Node} newNode\n\t * @param {Node} refNode\n\t */\n\tinsertBefore(newNode, refNode) {\n\t\tthis.insertAt(newNode, this.children.indexOf(refNode));\n\t}\n\n\t/**\n\t * Insert given `node` at `pos` position of child list\n\t * @param {Node} node\n\t * @param {Number} pos\n\t */\n\tinsertAt(node, pos) {\n\t\tif (pos < 0 || pos > this.children.length) {\n\t\t\tthrow new Error('Unable to insert node: position is out of child list range');\n\t\t}\n\n\t\tconst prev = this.children[pos - 1];\n\t\tconst next = this.children[pos];\n\n\t\tnode.remove();\n\t\tnode.parent = this;\n\t\tthis.children.splice(pos, 0, node);\n\n\t\tif (prev) {\n\t\t\tnode.previous = prev;\n\t\t\tprev.next = node;\n\t\t}\n\n\t\tif (next) {\n\t\t\tnode.next = next;\n\t\t\tnext.previous = node;\n\t\t}\n\t}\n\n\t/**\n\t * Removes given child from current node\n\t * @param {Node} node\n\t */\n\tremoveChild(node) {\n\t\tconst ix = this.children.indexOf(node);\n\t\tif (ix !== -1) {\n\t\t\tthis.children.splice(ix, 1);\n\t\t\tif (node.previous) {\n\t\t\t\tnode.previous.next = node.next;\n\t\t\t}\n\n\t\t\tif (node.next) {\n\t\t\t\tnode.next.previous = node.previous;\n\t\t\t}\n\n\t\t\tnode.parent = node.next = node.previous = null;\n\t\t}\n\t}\n\n\t/**\n\t * Removes current node from its parent\n\t */\n\tremove() {\n\t\tif (this.parent) {\n\t\t\tthis.parent.removeChild(this);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a detached copy of current node\n\t * @param {Boolean} deep Clone node contents as well\n\t * @return {Node}\n\t */\n\tclone(deep) {\n\t\tconst clone = new Node(this.name);\n\t\tclone.value = this.value;\n\t\tclone.selfClosing = this.selfClosing;\n\t\tif (this.repeat) {\n\t\t\tclone.repeat = Object.assign({}, this.repeat);\n\t\t}\n\n\t\tthis._attributes.forEach(attr => clone.setAttribute(attr.clone()));\n\n\t\tif (deep) {\n\t\t\tthis.children.forEach(child => clone.appendChild(child.clone(true)));\n\t\t}\n\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Walks on each descendant node and invokes given `fn` function on it.\n\t * The function receives two arguments: the node itself and its depth level\n\t * from current node. If function returns `false`, it stops walking\n\t * @param {Function} fn\n\t */\n\twalk(fn, _level) {\n\t\t_level = _level || 0;\n\t\tlet ctx = this.firstChild;\n\n\t\twhile (ctx) {\n\t\t\t// in case if context node will be detached during `fn` call\n\t\t\tconst next = ctx.next;\n\n\t\t\tif (fn(ctx, _level) === false || ctx.walk(fn, _level + 1) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tctx = next;\n\t\t}\n\t}\n\n\t/**\n\t * A helper method for transformation chaining: runs given `fn` function on\n\t * current node and returns the same node\n\t */\n\tuse(fn) {\n\t\tconst args = [this];\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\targs.push(arguments[i]);\n\t\t}\n\n\t\tfn.apply(null, args);\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst attrs = this.attributes.map(attr => {\n\t\t\tattr = this.getAttribute(attr.name);\n\t\t\tconst opt = attr.options;\n\t\t\tlet out = `${opt && opt.implied ? '!' : ''}${attr.name || ''}`;\n\t\t\tif (opt && opt.boolean) {\n\t\t\t\tout += '.';\n\t\t\t} else if (attr.value != null) {\n\t\t\t\tout += `=\"${attr.value}\"`;\n\t\t\t}\n\t\t\treturn out;\n\t\t});\n\n\t\tlet out = `${this.name || ''}`;\n\t\tif (attrs.length) {\n\t\t\tout += `[${attrs.join(' ')}]`;\n\t\t}\n\n\t\tif (this.value != null) {\n\t\t\tout += `{${this.value}}`;\n\t\t}\n\n\t\tif (this.selfClosing) {\n\t\t\tout += '/';\n\t\t}\n\n\t\tif (this.repeat) {\n\t\t\tout += `*${this.repeat.count ? this.repeat.count : ''}`;\n\t\t\tif (this.repeat.value != null) {\n\t\t\t\tout += `@${this.repeat.value}`;\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n}\n\n/**\n * Attribute factory\n * @param  {String|Attribute|Object} name  Attribute name or attribute descriptor\n * @param  {*} value Attribute value\n * @return {Attribute}\n */\nfunction createAttribute(name, value) {\n\tif (name instanceof Attribute) {\n\t\treturn name;\n\t}\n\n\tif (typeof name === 'string') {\n\t\treturn new Attribute(name, value);\n\t}\n\n\tif (name && typeof name === 'object') {\n\t\treturn new Attribute(name.name, name.value, name.options);\n\t}\n}\n\n/**\n * @param  {String} str\n * @return {String}\n */\nfunction normalize(str) {\n\treturn String(str).trim();\n}\n\nfunction uniqueClass(item, i, arr) {\n\treturn item && arr.indexOf(item) === i;\n}\n\nexport default Node;\n","/**\n * A streaming, character code-based string reader\n */\nclass StreamReader {\n\tconstructor(string, start, end) {\n\t\tif (end == null && typeof string === 'string') {\n\t\t\tend = string.length;\n\t\t}\n\n\t\tthis.string = string;\n\t\tthis.pos = this.start = start || 0;\n\t\tthis.end = end;\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the end of the file.\n\t * @returns {Boolean}\n\t */\n\teof() {\n\t\treturn this.pos >= this.end;\n\t}\n\n\t/**\n\t * Creates a new stream instance which is limited to given `start` and `end`\n\t * range. E.g. its `eof()` method will look at `end` property, not actual\n\t * stream end\n\t * @param  {Point} start\n\t * @param  {Point} end\n\t * @return {StreamReader}\n\t */\n\tlimit(start, end) {\n\t\treturn new this.constructor(this.string, start, end);\n\t}\n\n\t/**\n\t * Returns the next character code in the stream without advancing it.\n\t * Will return NaN at the end of the file.\n\t * @returns {Number}\n\t */\n\tpeek() {\n\t\treturn this.string.charCodeAt(this.pos);\n\t}\n\n\t/**\n\t * Returns the next character in the stream and advances it.\n\t * Also returns <code>undefined</code> when no more characters are available.\n\t * @returns {Number}\n\t */\n\tnext() {\n\t\tif (this.pos < this.string.length) {\n\t\t\treturn this.string.charCodeAt(this.pos++);\n\t\t}\n\t}\n\n\t/**\n\t * `match` can be a character code or a function that takes a character code\n\t * and returns a boolean. If the next character in the stream 'matches'\n\t * the given argument, it is consumed and returned.\n\t * Otherwise, `false` is returned.\n\t * @param {Number|Function} match\n\t * @returns {Boolean}\n\t */\n\teat(match) {\n\t\tconst ch = this.peek();\n\t\tconst ok = typeof match === 'function' ? match(ch) : ch === match;\n\n\t\tif (ok) {\n\t\t\tthis.next();\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t/**\n\t * Repeatedly calls <code>eat</code> with the given argument, until it\n\t * fails. Returns <code>true</code> if any characters were eaten.\n\t * @param {Object} match\n\t * @returns {Boolean}\n\t */\n\teatWhile(match) {\n\t\tconst start = this.pos;\n\t\twhile (!this.eof() && this.eat(match)) {}\n\t\treturn this.pos !== start;\n\t}\n\n\t/**\n\t * Backs up the stream n characters. Backing it up further than the\n\t * start of the current token will cause things to break, so be careful.\n\t * @param {Number} n\n\t */\n\tbackUp(n) {\n\t\tthis.pos -= (n || 1);\n\t}\n\n\t/**\n\t * Get the string between the start of the current token and the\n\t * current stream position.\n\t * @returns {String}\n\t */\n\tcurrent() {\n\t\treturn this.substring(this.start, this.pos);\n\t}\n\n\t/**\n\t * Returns substring for given range\n\t * @param  {Number} start\n\t * @param  {Number} [end]\n\t * @return {String}\n\t */\n\tsubstring(start, end) {\n\t\treturn this.string.slice(start, end);\n\t}\n\n\t/**\n\t * Creates error object with current stream state\n\t * @param {String} message\n\t * @return {Error}\n\t */\n\terror(message) {\n\t\tconst err = new Error(`${message} at char ${this.pos + 1}`);\n\t\terr.originalMessage = message;\n\t\terr.pos = this.pos;\n\t\terr.string = this.string;\n\t\treturn err;\n\t}\n}\n\nexport default StreamReader;\n","import { isNumber, eatQuoted, isWhiteSpace, isSpace, isQuote, isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\n\nconst ASTERISK = 42; // *\n\n/**\n * Consumes node repeat token from current stream position and returns its\n * parsed value\n * @param  {StringReader} stream\n * @return {Object}\n */\nfunction consumeRepeat(stream) {\n\tif (stream.eat(ASTERISK)) {\n\t\tstream.start = stream.pos;\n\n\t\t// XXX think about extending repeat syntax with through numbering\n\t\treturn { count: stream.eatWhile(isNumber) ? +stream.current() : null };\n\t}\n}\n\nconst opt = { throws: true };\n\n/**\n * Consumes quoted literal from current stream position and returns it’s inner,\n * unquoted, value\n * @param  {StringReader} stream\n * @return {String} Returns `null` if unable to consume quoted value from current\n * position\n */\nfunction consumeQuoted(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn stream.current().slice(1, -1);\n\t}\n}\n\nconst TEXT_START = 123; // {\nconst TEXT_END = 125; // }\nconst ESCAPE =  92; // \\ character\n\n/**\n * Consumes text node `{...}` from stream\n * @param  {StreamReader} stream\n * @return {String} Returns consumed text value (without surrounding braces) or\n * `null` if there’s no text at starting position\n */\nfunction consumeText(stream) {\n\t// NB using own implementation instead of `eatPair()` from @emmetio/stream-reader-utils\n\t// to disable quoted value consuming\n\tconst start = stream.pos;\n\n\tif (stream.eat(TEXT_START)) {\n\t\tlet stack = 1, ch;\n\t\tlet result = '';\n\t\tlet offset = stream.pos;\n\n\t\twhile (!stream.eof()) {\n\t\t\tch = stream.next();\n\t\t\tif (ch === TEXT_START) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === TEXT_END) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn result + stream.substring(offset, stream.pos - 1);\n\t\t\t\t}\n\t\t\t} else if (ch === ESCAPE) {\n\t\t\t\tch = stream.next();\n\t\t\t\tif (ch === TEXT_START || ch === TEXT_END) {\n\t\t\t\t\tresult += stream.substring(offset, stream.pos - 2) + String.fromCharCode(ch);\n\t\t\t\t\toffset = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\t\tthrow stream.error(`Unable to find closing ${String.fromCharCode(TEXT_END)} for text start`);\n\t}\n\n\treturn null;\n}\n\nconst EXCL       = 33; // .\nconst DOT        = 46; // .\nconst EQUALS     = 61; // =\nconst ATTR_OPEN  = 91; // [\nconst ATTR_CLOSE = 93; // ]\n\nconst reAttributeName = /^\\!?[\\w\\-:\\$@]+\\.?$|^\\!?\\[[\\w\\-:\\$@]+\\]\\.?$/;\n\n/**\n * Consumes attributes defined in square braces from given stream.\n * Example:\n * [attr col=3 title=\"Quoted string\" selected. support={react}]\n * @param {StringReader} stream\n * @returns {Array} Array of consumed attributes\n */\nfunction consumeAttributes(stream) {\n\tif (!stream.eat(ATTR_OPEN)) {\n\t\treturn null;\n\t}\n\n\tconst result = [];\n\tlet token, attr;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\n\t\tif (stream.eat(ATTR_CLOSE)) {\n\t\t\treturn result; // End of attribute set\n\t\t} else if ((token = consumeQuoted(stream)) != null) {\n\t\t\t// Consumed quoted value: anonymous attribute\n\t\t\tresult.push({\n\t\t\t\tname: null,\n\t\t\t\tvalue: token\n\t\t\t});\n\t\t} else if (eatUnquoted(stream)) {\n\t\t\t// Consumed next word: could be either attribute name or unquoted default value\n\t\t\ttoken = stream.current();\n\n\t\t\t// In angular attribute names can be surrounded by []\n\t\t\tif (token[0] === '[' && stream.peek() === ATTR_CLOSE) {\n\t\t\t\tstream.next();\n\t\t\t\ttoken = stream.current();\n\t\t\t}\n\t\t\t\n\t\t\tif (!reAttributeName.test(token)) {\n\t\t\t\t// anonymous attribute\n\t\t\t\tresult.push({ name: null, value: token });\n\t\t\t} else {\n\t\t\t\t// Looks like a regular attribute\n\t\t\t\tattr = parseAttributeName(token);\n\t\t\t\tresult.push(attr);\n\n\t\t\t\tif (stream.eat(EQUALS)) {\n\t\t\t\t\t// Explicitly defined value. Could be a word, a quoted string\n\t\t\t\t\t// or React-like expression\n\t\t\t\t\tif ((token = consumeQuoted(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t} else if ((token = consumeText(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t\tattr.options = {\n\t\t\t\t\t\t\tbefore: '{',\n\t\t\t\t\t\t\tafter: '}'\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (eatUnquoted(stream)) {\n\t\t\t\t\t\tattr.value = stream.current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow stream.error('Expected attribute name');\n\t\t}\n\t}\n\n\tthrow stream.error('Expected closing \"]\" brace');\n}\n\nfunction parseAttributeName(name) {\n\tconst options = {};\n\n\t// If a first character in attribute name is `!` — it’s an implied\n\t// default attribute\n\tif (name.charCodeAt(0) === EXCL) {\n\t\tname = name.slice(1);\n\t\toptions.implied = true;\n\t}\n\n\t// Check for last character: if it’s a `.`, user wants boolean attribute\n\tif (name.charCodeAt(name.length - 1) === DOT) {\n\t\tname = name.slice(0, name.length - 1);\n\t\toptions.boolean = true;\n\t}\n\n\tconst attr = { name };\n\tif (Object.keys(options).length) {\n\t\tattr.options = options;\n\t}\n\n\treturn attr;\n}\n\n/**\n * Eats token that can be an unquoted value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatUnquoted(stream) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(isUnquoted)) {\n\t\tstream.start = start;\n\t\treturn true;\n\t}\n}\n\nfunction isUnquoted(code) {\n\treturn !isSpace(code) && !isQuote(code)\n\t\t && code !== ATTR_CLOSE && code !== EQUALS;\n}\n\nconst HASH    = 35; // #\nconst DOT$1     = 46; // .\nconst SLASH   = 47; // /\n\n/**\n * Consumes a single element node from current abbreviation stream\n * @param  {StringReader} stream\n * @return {Node}\n */\nfunction consumeElement(stream) {\n\t// consume element name, if provided\n\tconst start = stream.pos;\n\tconst node = new Node(eatName(stream));\n\tlet next;\n\n\twhile (!stream.eof()) {\n\t\tif (stream.eat(DOT$1)) {\n\t\t\tnode.addClass(eatName(stream));\n\t\t} else if (stream.eat(HASH)) {\n\t\t\tnode.setAttribute('id', eatName(stream));\n\t\t} else if (stream.eat(SLASH)) {\n\t\t\t// A self-closing indicator must be at the end of non-grouping node\n\t\t\tif (node.isGroup) {\n\t\t\t\tstream.backUp(1);\n\t\t\t\tthrow stream.error('Unexpected self-closing indicator');\n\t\t\t}\n\t\t\tnode.selfClosing = true;\n\t\t\tif (next = consumeRepeat(stream)) {\n\t\t\t\tnode.repeat = next;\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (next = consumeAttributes(stream)) {\n\t\t\tfor (let i = 0, il = next.length; i < il; i++) {\n\t\t\t\tnode.setAttribute(next[i]);\n\t\t\t}\n\t\t} else if ((next = consumeText(stream)) !== null) {\n\t\t\tnode.value = next;\n\t\t} else if (next = consumeRepeat(stream)) {\n\t\t\tnode.repeat = next;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (start === stream.pos) {\n\t\tthrow stream.error(`Unable to consume abbreviation node, unexpected ${stream.peek()}`);\n\t}\n\n\treturn node;\n}\n\nfunction eatName(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isName);\n\treturn stream.current();\n}\n\nfunction isName(code) {\n\treturn isAlphaNumeric(code)\n\t\t|| code === 45 /* - */\n\t\t|| code === 58 /* : */\n\t\t|| code === 36 /* $ */\n\t\t|| code === 64 /* @ */\n\t\t|| code === 33 /* ! */\n\t\t|| code === 95 /* _ */\n\t\t|| code === 37 /* % */;\n}\n\nconst GROUP_START = 40; // (\nconst GROUP_END   = 41; // )\nconst OP_SIBLING  = 43; // +\nconst OP_CHILD    = 62; // >\nconst OP_CLIMB    = 94; // ^\n\n/**\n * Parses given string into a node tree\n * @param  {String} str Abbreviation to parse\n * @return {Node}\n */\nfunction parse(str) {\n\tconst stream = new StreamReader(str.trim());\n\tconst root = new Node();\n\tlet ctx = root, groupStack = [], ch;\n\n\twhile (!stream.eof()) {\n\t\tch = stream.peek();\n\n\t\tif (ch === GROUP_START) { // start of group\n\t\t\t// The grouping node should be detached to properly handle\n\t\t\t// out-of-bounds `^` operator. Node will be attached right on group end\n\t\t\tconst node = new Node();\n\t\t\tgroupStack.push([node, ctx, stream.pos]);\n\t\t\tctx = node;\n\t\t\tstream.next();\n\t\t\tcontinue;\n\t\t} else if (ch === GROUP_END) { // end of group\n\t\t\tconst lastGroup = groupStack.pop();\n\t\t\tif (!lastGroup) {\n\t\t\t\tthrow stream.error('Unexpected \")\" group end');\n\t\t\t}\n\n\t\t\tconst node = lastGroup[0];\n\t\t\tctx = lastGroup[1];\n\t\t\tstream.next();\n\n\t\t\t// a group can have a repeater\n\t\t\tif (node.repeat = consumeRepeat(stream)) {\n\t\t\t\tctx.appendChild(node);\n\t\t\t} else {\n\t\t\t\t// move all children of group into parent node\n\t\t\t\twhile (node.firstChild) {\n\t\t\t\t\tctx.appendChild(node.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// for convenience, groups can be joined with optional `+` operator\n\t\t\tstream.eat(OP_SIBLING);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst node = consumeElement(stream);\n\t\tctx.appendChild(node);\n\n\t\tif (stream.eof()) {\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (stream.peek()) {\n\t\t\tcase OP_SIBLING:\n\t\t\t\tstream.next();\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CHILD:\n\t\t\t\tstream.next();\n\t\t\t\tctx = node;\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CLIMB:\n\t\t\t\t// it’s perfectly valid to have multiple `^` operators\n\t\t\t\twhile (stream.eat(OP_CLIMB)) {\n\t\t\t\t\tctx = ctx.parent || ctx;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (groupStack.length) {\n\t\tstream.pos = groupStack.pop()[2];\n\t\tthrow stream.error('Expected group close');\n\t}\n\n\treturn root;\n}\n\n/**\n * Parses given abbreviation and un-rolls it into a full tree: recursively\n * replaces repeated elements with actual nodes\n * @param  {String} abbr\n * @return {Node}\n */\nfunction index(abbr) {\n\tconst tree = parse(abbr);\n\ttree.walk(unroll);\n\treturn tree;\n}\n\nfunction unroll(node) {\n\tif (!node.repeat || !node.repeat.count) {\n\t\treturn;\n\t}\n\n\tconst parent = node.parent;\n\tlet ix = parent.children.indexOf(node);\n\n\tfor (let i = 0; i < node.repeat.count; i++) {\n\t\tconst clone = node.clone(true);\n\t\tclone.repeat.value = i + 1;\n\t\tclone.walk(unroll);\n\n\t\tif (clone.isGroup) {\n\t\t\twhile (clone.children.length > 0) {\n\t\t\t\tclone.firstChild.repeat = clone.repeat;\n\t\t\t\tparent.insertAt(clone.firstChild, ix++);\n\t\t\t}\n\t\t} else {\n\t\t\tparent.insertAt(clone, ix++);\n\t\t}\n\t}\n\n\tnode.parent.removeChild(node);\n}\n\nexport default index;\n//# sourceMappingURL=abbreviation.es.js.map\n","import { isNumber, eatQuoted, isWhiteSpace, isSpace, isQuote, isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\n\nconst ASTERISK = 42; // *\n\n/**\n * Consumes node repeat token from current stream position and returns its\n * parsed value\n * @param  {StringReader} stream\n * @return {Object}\n */\nfunction consumeRepeat(stream) {\n\tif (stream.eat(ASTERISK)) {\n\t\tstream.start = stream.pos;\n\n\t\t// XXX think about extending repeat syntax with through numbering\n\t\treturn { count: stream.eatWhile(isNumber) ? +stream.current() : null };\n\t}\n}\n\nconst opt = { throws: true };\n\n/**\n * Consumes quoted literal from current stream position and returns it’s inner,\n * unquoted, value\n * @param  {StringReader} stream\n * @return {String} Returns `null` if unable to consume quoted value from current\n * position\n */\nfunction consumeQuoted(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn stream.current().slice(1, -1);\n\t}\n}\n\nconst TEXT_START = 123; // {\nconst TEXT_END = 125; // }\nconst ESCAPE =  92; // \\ character\n\n/**\n * Consumes text node `{...}` from stream\n * @param  {StreamReader} stream\n * @return {String} Returns consumed text value (without surrounding braces) or\n * `null` if there’s no text at starting position\n */\nfunction consumeText(stream) {\n\t// NB using own implementation instead of `eatPair()` from @emmetio/stream-reader-utils\n\t// to disable quoted value consuming\n\tconst start = stream.pos;\n\n\tif (stream.eat(TEXT_START)) {\n\t\tlet stack = 1, ch;\n\t\tlet result = '';\n\t\tlet offset = stream.pos;\n\n\t\twhile (!stream.eof()) {\n\t\t\tch = stream.next();\n\t\t\tif (ch === TEXT_START) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === TEXT_END) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn result + stream.substring(offset, stream.pos - 1);\n\t\t\t\t}\n\t\t\t} else if (ch === ESCAPE) {\n\t\t\t\tch = stream.next();\n\t\t\t\tif (ch === TEXT_START || ch === TEXT_END) {\n\t\t\t\t\tresult += stream.substring(offset, stream.pos - 2) + String.fromCharCode(ch);\n\t\t\t\t\toffset = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\t\tthrow stream.error(`Unable to find closing ${String.fromCharCode(TEXT_END)} for text start`);\n\t}\n\n\treturn null;\n}\n\nconst EXCL       = 33; // .\nconst DOT        = 46; // .\nconst EQUALS     = 61; // =\nconst ATTR_OPEN  = 91; // [\nconst ATTR_CLOSE = 93; // ]\n\nconst reAttributeName = /^\\!?[\\w\\-:\\$@]+\\.?$/;\n\n/**\n * Consumes attributes defined in square braces from given stream.\n * Example:\n * [attr col=3 title=\"Quoted string\" selected. support={react}]\n * @param {StringReader} stream\n * @returns {Array} Array of consumed attributes\n */\nfunction consumeAttributes(stream) {\n\tif (!stream.eat(ATTR_OPEN)) {\n\t\treturn null;\n\t}\n\n\tconst result = [];\n\tlet token, attr;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\n\t\tif (stream.eat(ATTR_CLOSE)) {\n\t\t\treturn result; // End of attribute set\n\t\t} else if ((token = consumeQuoted(stream)) != null) {\n\t\t\t// Consumed quoted value: anonymous attribute\n\t\t\tresult.push({\n\t\t\t\tname: null,\n\t\t\t\tvalue: token\n\t\t\t});\n\t\t} else if (eatUnquoted(stream)) {\n\t\t\t// Consumed next word: could be either attribute name or unquoted default value\n\t\t\ttoken = stream.current();\n\t\t\tif (!reAttributeName.test(token)) {\n\t\t\t\t// anonymous attribute\n\t\t\t\tresult.push({ name: null, value: token });\n\t\t\t} else {\n\t\t\t\t// Looks like a regular attribute\n\t\t\t\tattr = parseAttributeName(token);\n\t\t\t\tresult.push(attr);\n\n\t\t\t\tif (stream.eat(EQUALS)) {\n\t\t\t\t\t// Explicitly defined value. Could be a word, a quoted string\n\t\t\t\t\t// or React-like expression\n\t\t\t\t\tif ((token = consumeQuoted(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t} else if ((token = consumeText(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t\tattr.options = {\n\t\t\t\t\t\t\tbefore: '{',\n\t\t\t\t\t\t\tafter: '}'\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (eatUnquoted(stream)) {\n\t\t\t\t\t\tattr.value = stream.current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow stream.error('Expected attribute name');\n\t\t}\n\t}\n\n\tthrow stream.error('Expected closing \"]\" brace');\n}\n\nfunction parseAttributeName(name) {\n\tconst options = {};\n\n\t// If a first character in attribute name is `!` — it’s an implied\n\t// default attribute\n\tif (name.charCodeAt(0) === EXCL) {\n\t\tname = name.slice(1);\n\t\toptions.implied = true;\n\t}\n\n\t// Check for last character: if it’s a `.`, user wants boolean attribute\n\tif (name.charCodeAt(name.length - 1) === DOT) {\n\t\tname = name.slice(0, name.length - 1);\n\t\toptions.boolean = true;\n\t}\n\n\tconst attr = { name };\n\tif (Object.keys(options).length) {\n\t\tattr.options = options;\n\t}\n\n\treturn attr;\n}\n\n/**\n * Eats token that can be an unquoted value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatUnquoted(stream) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(isUnquoted)) {\n\t\tstream.start = start;\n\t\treturn true;\n\t}\n}\n\nfunction isUnquoted(code) {\n\treturn !isSpace(code) && !isQuote(code)\n\t\t&& code !== ATTR_OPEN && code !== ATTR_CLOSE && code !== EQUALS;\n}\n\nconst HASH    = 35; // #\nconst DOT$1     = 46; // .\nconst SLASH   = 47; // /\n\n/**\n * Consumes a single element node from current abbreviation stream\n * @param  {StringReader} stream\n * @return {Node}\n */\nfunction consumeElement(stream) {\n\t// consume element name, if provided\n\tconst start = stream.pos;\n\tconst node = new Node(eatName(stream));\n\tlet next;\n\n\twhile (!stream.eof()) {\n\t\tif (stream.eat(DOT$1)) {\n\t\t\tnode.addClass(eatName(stream));\n\t\t} else if (stream.eat(HASH)) {\n\t\t\tnode.setAttribute('id', eatName(stream));\n\t\t} else if (stream.eat(SLASH)) {\n\t\t\t// A self-closing indicator must be at the end of non-grouping node\n\t\t\tif (node.isGroup) {\n\t\t\t\tstream.backUp(1);\n\t\t\t\tthrow stream.error('Unexpected self-closing indicator');\n\t\t\t}\n\t\t\tnode.selfClosing = true;\n\t\t\tif (next = consumeRepeat(stream)) {\n\t\t\t\tnode.repeat = next;\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (next = consumeAttributes(stream)) {\n\t\t\tfor (let i = 0, il = next.length; i < il; i++) {\n\t\t\t\tnode.setAttribute(next[i]);\n\t\t\t}\n\t\t} else if ((next = consumeText(stream)) !== null) {\n\t\t\tnode.value = next;\n\t\t} else if (next = consumeRepeat(stream)) {\n\t\t\tnode.repeat = next;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (start === stream.pos) {\n\t\tthrow stream.error(`Unable to consume abbreviation node, unexpected ${stream.peek()}`);\n\t}\n\n\treturn node;\n}\n\nfunction eatName(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isName);\n\treturn stream.current();\n}\n\nfunction isName(code) {\n\treturn isAlphaNumeric(code)\n\t\t|| code === 45 /* - */\n\t\t|| code === 58 /* : */\n\t\t|| code === 36 /* $ */\n\t\t|| code === 64 /* @ */\n\t\t|| code === 33 /* ! */\n\t\t|| code === 95 /* _ */\n\t\t|| code === 37 /* % */;\n}\n\nconst GROUP_START = 40; // (\nconst GROUP_END   = 41; // )\nconst OP_SIBLING  = 43; // +\nconst OP_CHILD    = 62; // >\nconst OP_CLIMB    = 94; // ^\n\n/**\n * Parses given string into a node tree\n * @param  {String} str Abbreviation to parse\n * @return {Node}\n */\nfunction parse(str) {\n\tconst stream = new StreamReader(str.trim());\n\tconst root = new Node();\n\tlet ctx = root, groupStack = [], ch;\n\n\twhile (!stream.eof()) {\n\t\tch = stream.peek();\n\n\t\tif (ch === GROUP_START) { // start of group\n\t\t\t// The grouping node should be detached to properly handle\n\t\t\t// out-of-bounds `^` operator. Node will be attached right on group end\n\t\t\tconst node = new Node();\n\t\t\tgroupStack.push([node, ctx, stream.pos]);\n\t\t\tctx = node;\n\t\t\tstream.next();\n\t\t\tcontinue;\n\t\t} else if (ch === GROUP_END) { // end of group\n\t\t\tconst lastGroup = groupStack.pop();\n\t\t\tif (!lastGroup) {\n\t\t\t\tthrow stream.error('Unexpected \")\" group end');\n\t\t\t}\n\n\t\t\tconst node = lastGroup[0];\n\t\t\tctx = lastGroup[1];\n\t\t\tstream.next();\n\n\t\t\t// a group can have a repeater\n\t\t\tif (node.repeat = consumeRepeat(stream)) {\n\t\t\t\tctx.appendChild(node);\n\t\t\t} else {\n\t\t\t\t// move all children of group into parent node\n\t\t\t\twhile (node.firstChild) {\n\t\t\t\t\tctx.appendChild(node.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// for convenience, groups can be joined with optional `+` operator\n\t\t\tstream.eat(OP_SIBLING);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst node = consumeElement(stream);\n\t\tctx.appendChild(node);\n\n\t\tif (stream.eof()) {\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (stream.peek()) {\n\t\t\tcase OP_SIBLING:\n\t\t\t\tstream.next();\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CHILD:\n\t\t\t\tstream.next();\n\t\t\t\tctx = node;\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CLIMB:\n\t\t\t\t// it’s perfectly valid to have multiple `^` operators\n\t\t\t\twhile (stream.eat(OP_CLIMB)) {\n\t\t\t\t\tctx = ctx.parent || ctx;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (groupStack.length) {\n\t\tstream.pos = groupStack.pop()[2];\n\t\tthrow stream.error('Expected group close');\n\t}\n\n\treturn root;\n}\n\n/**\n * Parses given abbreviation and un-rolls it into a full tree: recursively\n * replaces repeated elements with actual nodes\n * @param  {String} abbr\n * @return {Node}\n */\nfunction index(abbr) {\n\tconst tree = parse(abbr);\n\ttree.walk(unroll);\n\treturn tree;\n}\n\nfunction unroll(node) {\n\tif (!node.repeat || !node.repeat.count) {\n\t\treturn;\n\t}\n\n\tconst parent = node.parent;\n\tlet ix = parent.children.indexOf(node);\n\n\tfor (let i = 0; i < node.repeat.count; i++) {\n\t\tconst clone = node.clone(true);\n\t\tclone.repeat.value = i + 1;\n\t\tclone.walk(unroll);\n\n\t\tif (clone.isGroup) {\n\t\t\twhile (clone.children.length > 0) {\n\t\t\t\tclone.firstChild.repeat = clone.repeat;\n\t\t\t\tparent.insertAt(clone.firstChild, ix++);\n\t\t\t}\n\t\t} else {\n\t\t\tparent.insertAt(clone, ix++);\n\t\t}\n\t}\n\n\tnode.parent.removeChild(node);\n}\n\nexport default index;\n//# sourceMappingURL=abbreviation.es.js.map\n","import parse from '@emmetio/abbreviation';\n\n/**\n * For every node in given `tree`, finds matching snippet from `registry` and\n * resolves it into a parsed abbreviation. Resolved node is then updated or\n * replaced with matched abbreviation tree.\n *\n * A HTML registry basically contains aliases to another Emmet abbreviations,\n * e.g. a predefined set of name, attribues and so on, possibly a complex\n * abbreviation with multiple elements. So we have to get snippet, parse it\n * and recursively resolve it.\n *\n * @param  {Node} tree                 Parsed Emmet abbreviation\n * @param  {SnippetsRegistry} registry Registry with all available snippets\n * @return {Node} Updated tree\n */\n\nvar index = function(tree, registry) {\n    tree.walk(node => resolveNode(node, registry));\n    return tree;\n};\n\nfunction resolveNode(node, registry) {\n    const stack = new Set();\n    const resolve = node => {\n        const snippet = registry.resolve(node.name);\n        // A snippet in stack means circular reference.\n        // It can be either a user error or a perfectly valid snippet like\n        // \"img\": \"img[src alt]/\", e.g. an element with predefined shape.\n        // In any case, simply stop parsing and keep element as is\n        if (!snippet || stack.has(snippet)) {\n            return;\n        }\n\n        // In case if matched snippet is a function, pass control into it\n        if (typeof snippet.value === 'function') {\n            return snippet.value(node, registry, resolve);\n        }\n\n        const tree = parse(snippet.value);\n\n        stack.add(snippet);\n        tree.walk(resolve);\n        stack.delete(snippet);\n\n        // move current node contents into new tree\n        const childTarget = findDeepestNode(tree);\n        merge(childTarget, node);\n\n        while (tree.firstChild) {\n            node.parent.insertBefore(tree.firstChild, node);\n        }\n\n        childTarget.parent.insertBefore(node, childTarget);\n        childTarget.remove();\n    };\n\n    resolve(node);\n}\n\n/**\n * Adds data from first node into second node and returns it\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction merge(from, to) {\n    to.name = from.name;\n\n    if (from.selfClosing) {\n        to.selfClosing = true;\n    }\n\n    if (from.value != null) {\n        to.value = from.value;\n    }\n\n    if (from.repeat) {\n        to.repeat = Object.assign({}, from.repeat);\n    }\n\n    return mergeAttributes(from, to);\n}\n\n/**\n * Transfer attributes from first element to second one and preserve first\n * element’s attributes order\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction mergeAttributes(from, to) {\n    mergeClassNames(from, to);\n\n    // It’s important to preserve attributes order: ones in `from` have higher\n    // pripority than in `to`. Collect attributes in map in order they should\n    // appear in `to`\n    const attrMap = new Map();\n\n    let attrs = from.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        attrMap.set(attrs[i].name, attrs[i].clone());\n    }\n\n    attrs = to.attributes.slice();\n    for (let i = 0, attr, a; i < attrs.length; i++) {\n        attr = attrs[i];\n        if (attrMap.has(attr.name)) {\n            a = attrMap.get(attr.name);\n            a.value = attr.value;\n\n            // If user explicitly wrote attribute in abbreviation, it’s no longer\n            // implied and should be outputted even if value is empty\n            if (a.options.implied) {\n                a.options.implied = false;\n            }\n        } else {\n            attrMap.set(attr.name, attr);\n        }\n\n        to.removeAttribute(attr);\n    }\n\n    const newAttrs = Array.from(attrMap.values());\n    for (let i = 0; i < newAttrs.length; i++) {\n        to.setAttribute(newAttrs[i]);\n    }\n\n    return to;\n}\n\n/**\n * Adds class names from first node to second one\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction mergeClassNames(from, to) {\n    const classNames = from.classList;\n    for (let i = 0; i < classNames.length; i++) {\n        to.addClass(classNames[i]);\n    }\n\n    return to;\n}\n\n/**\n * Finds node which is the deepest for in current node or node iteself.\n * @param  {Node} node\n * @return {Node}\n */\nfunction findDeepestNode(node) {\n\twhile (node.children.length) {\n\t\tnode = node.children[node.children.length - 1];\n\t}\n\n\treturn node;\n}\n\nexport default index;\n","const inlineElements = new Set('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(','));\nconst elementMap = {\n    p: 'span',\n    ul: 'li',\n    ol: 'li',\n    table: 'tr',\n    tr: 'td',\n    tbody: 'tr',\n    thead: 'tr',\n    tfoot: 'tr',\n    colgroup: 'col',\n    select: 'option',\n    optgroup: 'option',\n    audio: 'source',\n    video: 'source',\n    object: 'param',\n    map: 'area'\n};\n\n/**\n * Returns best child node name for given parent node name\n * @param  {String} parentName Name of parent node\n * @return {String}\n */\nfunction resolveImplicitName(parentName) {\n    parentName = (parentName || '').toLowerCase();\n    return elementMap[parentName]\n        || (inlineElements.has(parentName) ? 'span' : 'div');\n}\n\nexport default resolveImplicitName;\n","import resolveImplicitTag from '@emmetio/implicit-tag';\n\n/**\n * Adds missing tag names for given tree depending on node’s parent name\n */\nvar implicitTags = function(tree) {\n    tree.walk(node => {\n        // resolve only nameless nodes without content\n        if (node.name == null && node.attributes.length) {\n            node.name = resolveImplicitTag(node.parent.name);\n        }\n    });\n    return tree;\n};\n\n/**\n * Locates all occurances of given `token` which are not escaped (e.g. are not\n * preceded with `\\`) given in `str`\n * @param  {String} str\n * @return {Array}  Array of token ranges\n */\nfunction findUnescapedTokens(str, token) {\n    const result = new Set();\n    const tlen = token.length;\n\n    // 1. Find all occurances of tokens\n    let pos = 0;\n    while ((pos = str.indexOf(token, pos)) !== -1) {\n        result.add(pos);\n        pos += tlen;\n    }\n\n    if (result.size) {\n        // 2. Remove ones that escaped\n        let pos = 0;\n        const len = str.length;\n\n        while (pos < len) {\n            if (str[pos++] === '\\\\') {\n                result.delete(pos++);\n            }\n        }\n    }\n\n    return Array.from(result).map(ix => range(ix, tlen));\n}\n\n/**\n * Replaces `ranges`, generated by `range()` function, with given `value` in `str`\n * @param  {String} str    Where to replace ranges\n * @param  {Array} ranges Ranes, created by `range()` function\n * @param  {String|Function} value  Replacement value. If it’s a function, it\n * will take a range value as argument and should return a new string\n * @return {String}\n */\nfunction replaceRanges(str, ranges, value) {\n\t// should walk from the end of array to keep ranges valid after replacement\n\tfor (let i = ranges.length - 1; i >= 0; i--) {\n\t\tconst r = ranges[i];\n\n        let offset = 0;\n        let offsetLength = 0;\n        let descendingOrder = false;\n\n        if (str.substr(r[0] + r[1], 1) === '@'){\n            if (str.substr(r[0] + r[1] + 1, 1) === '-') {\n                descendingOrder = true;\n            } \n            const matches = str.substr(r[0] + r[1] + 1 + Number(descendingOrder)).match(/^(\\d+)/);\n            if (matches) {\n                offsetLength = matches[1].length + 1 + Number(descendingOrder);\n                offset = parseInt(matches[1]) - 1;\n            } else {\n                offsetLength = 2;\n            }\n        }\n\n\t\tstr = str.substring(0, r[0])\n\t\t\t+ (typeof value === 'function' ? value(str.substr(r[0], r[1]), offset, descendingOrder) : value)\n\t\t\t+ str.substring(r[0] + r[1] + offsetLength);\n\t}\n\n\treturn str;\n}\n\nfunction range(start, length) {\n    return [start, length];\n}\n\nconst numberingToken = '$';\n\n/**\n * Numbering of expanded abbreviation: finds all nodes with `$` in value\n * or attributes and replaces its occurances with repeater value\n */\nvar applyNumbering = function(tree) {\n    tree.walk(applyNumbering$1);\n    return tree;\n};\n\n/**\n * Applies numbering for given node: replaces occurances of numbering token\n * in node’s name, content and attributes\n * @param  {Node} node\n * @return {Node}\n */\nfunction applyNumbering$1(node) {\n    const repeater = findRepeater(node);\n\n    if (repeater && repeater.value != null) {\n        // NB replace numbering in nodes with explicit repeater only:\n        // it solves issues with abbreviations like `xsl:if[test=$foo]` where\n        // `$foo` is preferred output\n        const value = repeater.value;\n        const count = repeater.count;\n\n        node.name = replaceNumbering(node.name, value, count);\n        node.value = replaceNumbering(node.value, value, count);\n        node.attributes.forEach(attr => {\n            const copy = node.getAttribute(attr.name).clone();\n            copy.name = replaceNumbering(attr.name, value, count);\n            copy.value = replaceNumbering(attr.value, value, count);\n            node.replaceAttribute(attr.name, copy);\n        });\n    }\n\n    return node;\n}\n\n/**\n * Returns repeater object for given node\n * @param  {Node} node\n * @return {Object}\n */\nfunction findRepeater(node) {\n    while (node) {\n        if (node.repeat) {\n            return node.repeat;\n        }\n\n        node = node.parent;\n    }\n}\n\n/**\n * Replaces numbering in given string\n * @param  {String} str\n * @param  {Number} value\n * @return {String}\n */\nfunction replaceNumbering(str, value, count) {\n    // replace numbering in strings only: skip explicit wrappers that could\n    // contain unescaped numbering tokens\n    if (typeof str === 'string') {\n        const ranges = getNumberingRanges(str);\n        return replaceNumberingRanges(str, ranges, value, count);\n    }\n\n    return str;\n}\n\n/**\n * Returns numbering ranges, e.g. ranges of `$` occurances, in given string.\n * Multiple adjacent ranges are combined\n * @param  {String} str\n * @return {Array}\n */\nfunction getNumberingRanges(str) {\n    return findUnescapedTokens(str || '', numberingToken)\n    .reduce((out, range$$1) => {\n        // skip ranges that actually belongs to output placeholder or tabstops\n        if (!/[#{]/.test(str[range$$1[0] + 1] || '')) {\n            const lastRange = out[out.length - 1];\n            if (lastRange && lastRange[0] + lastRange[1] === range$$1[0]) {\n                lastRange[1] += range$$1[1];\n            } else {\n                out.push(range$$1);\n            }\n        }\n\n        return out;\n    }, []);\n}\n\n/**\n * @param  {String} str\n * @param  {Array} ranges\n * @param  {Number} value\n * @return {String}\n */\nfunction replaceNumberingRanges(str, ranges, value, count) {\n    const replaced = replaceRanges(str, ranges, (token, offset, descendingOrder) => {\n    let _value = descendingOrder ? String(offset + count - value + 1) : String(value + offset);\n        // pad values for multiple numbering tokens, e.g. 3 for $$$ becomes 003\n        while (_value.length < token.length) {\n            _value = '0' + _value;\n        }\n        return _value;\n    });\n\n    // unescape screened numbering tokens\n    return unescapeString(replaced);\n}\n\n/**\n * Unescapes characters, screened with `\\`, in given string\n * @param  {String} str\n * @return {String}\n */\nfunction unescapeString(str) {\n    let i = 0, result = '';\n    const len = str.length;\n\n    while (i < len) {\n        const ch = str[i++];\n        result += (ch === '\\\\') ? (str[i++] || '') : ch;\n    }\n\n    return result;\n}\n\n/** Placeholder for inserted content */\nconst placeholder = '$#';\n\n/** Placeholder for caret */\nconst caret = '|';\n\nconst reUrl = /^((?:https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\nconst reEmail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\nconst reProto = /^([a-z]+:)?\\/\\//i;\n\n/**\n * Inserts content into node with implicit repeat count: this node is then\n * duplicated for each content item and content itself is inserted either into\n * deepest child or instead of a special token.\n *\n * This method uses two distinct steps: `prepare()` and `insert()` since most\n * likely these steps will be used separately to properly insert content\n * with unescaped `$` numbering markers.\n *\n * @param {Node} tree Parsed abbreviation\n * @param {String[]} content Array of content items to insert\n * @return {Node}\n */\n/**\n * Finds nodes with implicit repeat and creates `amount` copies of it in tree\n * @param  {Node} tree\n * @param  {Number} amount\n * @return {Node}\n */\nfunction prepare(tree, amount) {\n    amount = amount || 1;\n    tree.walk(node => {\n        if (node.repeat && node.repeat.count === null) {\n            for (let i = 0; i < amount; i++) {\n                const clone = node.clone(true);\n                clone.repeat.implicit = true;\n                clone.repeat.count = amount;\n                clone.repeat.value = i + 1;\n                clone.repeat.index = i;\n                node.parent.insertBefore(clone, node);\n            }\n\n            node.remove();\n        }\n    });\n\n    return tree;\n}\n\n/**\n * Inserts content into implicitly repeated nodes, created by `prepare()` method\n * @param  {Node} tree\n * @param  {String[]} content\n * @return {Node}\n */\nfunction insert(tree, content) {\n    if (Array.isArray(content) && content.length) {\n        let updated = false;\n        tree.walk(node => {\n            if (node.repeat && node.repeat.implicit) {\n                updated = true;\n                insertContent(node, content[node.repeat.index]);\n            }\n        });\n\n        if (!updated) {\n            // no node with implicit repeat was found, insert content as\n            // deepest child\n            setNodeContent(findDeepestNode(tree), content.join('\\n'));\n        }\n    }\n\n    return tree;\n}\n\n/**\n * Inserts `content` into given `node`: either replaces output placeholders\n * or inserts it into deepest child node\n * @param  {Node} node\n * @param  {String} content\n * @return {Node}\n */\nfunction insertContent(node, content) {\n\tlet inserted = insertContentIntoPlaceholder(node, content);\n\tnode.walk(child => inserted |= insertContentIntoPlaceholder(child, content));\n\n\tif (!inserted) {\n\t\t// no placeholders were found in node, insert content into deepest child\n\t\tsetNodeContent(findDeepestNode(node), content);\n\t}\n\n\treturn node;\n}\n\n/**\n * Inserts given `content` into placeholders for given `node`. Placeholders\n * might be available in attribute values and node content\n * @param  {Node} node\n * @param  {String} content\n * @return {Boolean} Returns `true` if placeholders were found and replaced in node\n */\nfunction insertContentIntoPlaceholder(node, content) {\n\tconst state = {replaced: false};\n\n\tnode.value = replacePlaceholder(node.value, content, state);\n\tnode.attributes.forEach(attr => {\n\t\tif (attr.value) {\n\t\t\tnode.setAttribute(attr.name, replacePlaceholder(attr.value, content, state));\n\t\t}\n\t});\n\n\treturn state.replaced;\n}\n\n/**\n * Replaces all placeholder occurances in given `str` with `value`\n * @param  {String} str\n * @param  {String} value\n * @param  {Object} [_state] If provided, set `replaced` property of given\n * object to `true` if placeholder was found and replaced\n * @return {String}\n */\nfunction replacePlaceholder(str, value, _state) {\n\tif (typeof str === 'string') {\n\t\tconst ranges = findUnescapedTokens(str, placeholder);\n\t\tif (ranges.length) {\n\t\t\tif (_state) {\n\t\t\t\t_state.replaced = true;\n\t\t\t}\n\n\t\t\tstr = replaceRanges(str, ranges, value);\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * Finds node which is the deepest for in current node or node iteself.\n * @param  {Node} node\n * @return {Node}\n */\nfunction findDeepestNode(node) {\n\twhile (node.children.length) {\n\t\tnode = node.children[node.children.length - 1];\n\t}\n\n\treturn node;\n}\n\n/**\n * Updates content of given node\n * @param {Node} node\n * @param {String} content\n */\nfunction setNodeContent(node, content) {\n\t// find caret position and replace it with content, if possible\n\tif (node.value) {\n\t\tconst ranges = findUnescapedTokens(node.value, caret);\n\t\tif (ranges.length) {\n\t\t\tnode.value = replaceRanges(node.value, ranges, content);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (node.name.toLowerCase() === 'a' || node.hasAttribute('href')) {\n\t\t// special case: inserting content into `<a>` tag\n\t\tif (reUrl.test(content)) {\n\t\t\tnode.setAttribute('href', (reProto.test(content) ? '' : 'http://') + content);\n\t\t} else if (reEmail.test(content)) {\n\t\t\tnode.setAttribute('href', 'mailto:' + content);\n\t\t}\n\t}\n\n\tnode.value = content;\n}\n\nconst defaultOptions = {\n\telement: '__',\n\tmodifier: '_'\n};\n\nconst reElement  = /^(-+)([a-z0-9]+[a-z0-9-]*)/i;\nconst reModifier = /^(_+)([a-z0-9]+[a-z0-9-]*)/i;\nconst blockCandidates1 = className => /^[a-z]\\-/i.test(className);\nconst blockCandidates2 = className => /^[a-z]/i.test(className);\n\n/**\n * BEM transformer: updates class names written as `-element` and\n * `_modifier` into full class names as described in BEM specs. Also adds missing\n * class names: fir example, if node contains `.block_modifier` class, ensures\n * that element contains `.block` class as well\n */\nvar bem = function(tree, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\n\ttree.walk(node => expandClassNames(node, options));\n\n\tconst lookup = createBlockLookup(tree);\n\ttree.walk(node => expandShortNotation(node, lookup, options));\n\n\treturn tree;\n};\n\n/**\n * Expands existing class names in BEM notation in given `node`.\n * For example, if node contains `b__el_mod` class name, this method ensures\n * that element contains `b__el` class as well\n * @param  {Node} node\n * @param  {Object} options\n * @return {Set}\n */\nfunction expandClassNames(node, options) {\n\tconst classNames = node.classList.reduce((out, cl) => {\n\t\t// remove all modifiers and element prefixes from class name to get a base element name\n\t\tconst ix = cl.indexOf('_');\n\t\tif (ix > 0 && !cl.startsWith('-')) {\n\t\t\tout.add(cl.slice(0, ix));\n\t\t    out.add(cl.slice(ix));\n\t\t\treturn out;\n\t\t}\n\n\t\treturn out.add(cl);\n\t}, new Set());\n\n\tif (classNames.size) {\n\t\tnode.setAttribute('class', Array.from(classNames).join(' '));\n\t}\n}\n\n/**\n * Expands short BEM notation, e.g. `-element` and `_modifier`\n * @param  {Node} node      Parsed Emmet abbreviation node\n * @param  {Map} lookup     BEM block name lookup\n * @param  {Object} options\n */\nfunction expandShortNotation(node, lookup, options) {\n\tconst classNames = node.classList.reduce((out, cl) => {\n\t\tlet prefix, m;\n\t\tconst originalClass = cl;\n\n\t\t// parse element definition (could be only one)\n\t\tif (m = cl.match(reElement)) {\n\t\t\tprefix = getBlockName(node, lookup, m[1]) + options.element + m[2];\n\t\t\tout.add(prefix);\n\t\t\tcl = cl.slice(m[0].length);\n\t\t}\n\n\t\t// parse modifiers definitions (may contain multiple)\n\t\twhile (m = cl.match(reModifier)) {\n\t\t\tif (!prefix) {\n\t\t\t\tprefix = getBlockName(node, lookup, m[1]);\n\t\t\t\tout.add(prefix);\n\t\t\t}\n\n\t\t\tout.add(`${prefix}${options.modifier}${m[2]}`);\n\t\t\tcl = cl.slice(m[0].length);\n\t\t}\n\n\t\tif (cl === originalClass) {\n\t\t\t// class name wasn’t modified: it’s not a BEM-specific class,\n\t\t\t// add it as-is into output\n\t\t\tout.add(originalClass);\n\t\t}\n\n\t\treturn out;\n\t}, new Set());\n\n\tconst arrClassNames = Array.from(classNames).filter(Boolean);\n\tif (arrClassNames.length) {\n\t\tnode.setAttribute('class', arrClassNames.join(' '));\n\t}\n}\n\n/**\n * Creates block name lookup for each node in given tree, e.g. finds block\n * name explicitly for each node\n * @param  {Node} tree\n * @return {Map}\n */\nfunction createBlockLookup(tree) {\n\tconst lookup = new Map();\n\n\ttree.walk(node => {\n\t\tconst classNames = node.classList;\n\t\tif (classNames.length) {\n\t\t\t// guess best block name from class or use parent’s block name\n\t\t\tlookup.set(node,\n\t\t\t\tfind(classNames, blockCandidates1)\n\t\t\t\t|| find(classNames, blockCandidates2)\n\t\t\t\t|| lookup.get(node.parent)\n\t\t\t);\n\t\t}\n\t});\n\n\treturn lookup;\n}\n\n/**\n * Returns block name for given `node` by `prefix`, which tells the depth of\n * of parent node lookup\n * @param  {Node} node\n * @param  {Map} lookup\n * @param  {String} prefix\n * @return {String}\n */\nfunction getBlockName(node, lookup, prefix) {\n\tlet depth = prefix.length > 1 ? prefix.length : 0;\n\n\t// NB don’t walk up to root node, stay at first root child in case of\n\t// too deep prefix\n\twhile (node.parent && node.parent.parent && depth--) {\n\t\tnode = node.parent;\n\t}\n\n\treturn lookup.get(node) || '';\n}\n\nfunction find(arr, filter) {\n\treturn arr.filter(filter)[0];\n}\n\n/**\n * JSX transformer: replaces `class` and `for` attributes with `className` and\n * `htmlFor` attributes respectively\n */\nvar jsx = function(tree) {\n\ttree.walk(node => {\n\t\treplace(node, 'class', 'className');\n\t\treplace(node, 'for', 'htmlFor');\n\t});\n\treturn tree;\n};\n\nfunction replace(node, oldName, newName) {\n\tlet attr = node.getAttribute(oldName);\n\tif (attr) {\n\t\tattr.name = newName;\n\t}\n}\n\nconst reSupporterNames = /^xsl:(variable|with\\-param)$/i;\n\n/**\n * XSL transformer: removes `select` attributes from certain nodes that contain\n * children\n */\nvar xsl = function(tree) {\n\ttree.walk(node => {\n\t\tif (reSupporterNames.test(node.name || '') && (node.children.length || node.value)) {\n\t\t\tnode.removeAttribute('select');\n\t\t}\n\t});\n\treturn tree;\n};\n\nconst supportedAddons = { bem, jsx, xsl };\n\n/**\n * Runs additional transforms on given tree.\n * These transforms may introduce side-effects and unexpected result\n * so they are not applied by default, authors must specify which addons\n * in `addons` argument as `{addonName: addonOptions}`\n * @param {Node} tree Parsed Emmet abbreviation\n * @param {Object} addons Add-ons to apply and their options\n */\nvar addons = function(tree, addons) {\n    Object.keys(addons || {}).forEach(key => {\n        if (key in supportedAddons) {\n            const addonOpt = typeof addons[key] === 'object' ? addons[key] : null;\n            tree = tree.use(supportedAddons[key], addonOpt);\n        }\n    });\n\n    return tree;\n};\n\n/**\n * Applies basic HTML-specific transformations for given parsed abbreviation:\n * – resolve implied tag names\n * – insert repeated content\n * – resolve node numbering\n */\nvar index = function(tree, content, appliedAddons) {\n    if (typeof content === 'string') {\n        content = [content];\n    } else if (content && typeof content === 'object' && !Array.isArray(content)) {\n        appliedAddons = content;\n        content = null;\n    }\n\n    return tree\n    .use(implicitTags)\n    .use(prepare, Array.isArray(content) ? content.length : null)\n    .use(applyNumbering)\n    .use(insert, content)\n    .use(addons, appliedAddons);\n};\n\nexport default index;\n","/**\n * Replaces all unescaped ${variable} occurances in given parsed abbreviation\n * `tree` with values provided in `variables` hash. Precede `$` with `\\` to\n * escape it and skip replacement\n * @param {Node} tree Parsed abbreviation tree\n * @param {Object} variables Variables values\n * @return {Node}\n */\nfunction replaceVariables(tree, variables) {\n\tvariables = variables || {};\n    tree.walk(node => replaceInNode(node, variables));\n    return tree;\n}\n\nfunction replaceInNode(node, variables) {\n    // Replace variables in attributes.\n    const attrs = node.attributes;\n\n    for (let i = 0, il = attrs.length; i < il; i++) {\n        const attr = attrs[i];\n        if (typeof attr.value === 'string') {\n            node.setAttribute(attr.name, replaceInString(attr.value, variables));\n        }\n    }\n\n    if (node.value != null) {\n        node.value = replaceInString(node.value, variables);\n    }\n\n    return node;\n}\n\n/**\n * Replaces all unescaped `${variable}` occurances in given string with values\n * from `variables` object\n * @param  {String} string\n * @param  {Object} variables\n * @return {String}\n */\nfunction replaceInString(string, variables) {\n    const model = createModel(string);\n    let offset = 0;\n    let output = '';\n\n    for (let i = 0, il = model.variables.length; i < il; i++) {\n        const v = model.variables[i];\n        let value = v.name in variables ? variables[v.name] : v.name;\n        if (typeof value === 'function') {\n            value = value(model.string, v, offset + v.location);\n        }\n\n        output += model.string.slice(offset, v.location) + value;\n        offset = v.location + v.length;\n    }\n\n    return output + model.string.slice(offset);\n}\n\n/**\n * Creates variable model from given string. The model contains a `string` with\n * all escaped variable tokens written without escape symbol and `variables`\n * property with all unescaped variables and their ranges\n * @param  {String} string\n * @return {Object}\n */\nfunction createModel(string) {\n    const reVariable = /\\$\\{([a-z][\\w\\-]*)\\}/ig;\n    const escapeCharCode = 92; // `\\` symbol\n    const variables = [];\n\n    // We have to replace unescaped (e.g. not preceded with `\\`) tokens.\n    // Instead of writing a stream parser, we’ll cut some edges here:\n    // 1. Find all tokens\n    // 2. Walk string char-by-char and resolve only tokens that are not escaped\n    const tokens = new Map();\n    let m;\n    while (m = reVariable.exec(string)) {\n        tokens.set(m.index, m);\n    }\n\n    if (tokens.size) {\n        let start = 0, pos = 0, len = string.length;\n        let output = '';\n        while (pos < len) {\n            if (string.charCodeAt(pos) === escapeCharCode && tokens.has(pos + 1)) {\n                // Found escape symbol that escapes variable: we should\n                // omit this symbol in output string and skip variable\n                const token = tokens.get(pos + 1);\n                output += string.slice(start, pos) + token[0];\n                start = pos = token.index + token[0].length;\n                tokens.delete(pos + 1);\n                continue;\n            }\n\n            pos++;\n        }\n\n        string = output + string.slice(start);\n\n        // Not using `.map()` here to reduce memory allocations\n        const validMatches = Array.from(tokens.values());\n        for (let i = 0, il = validMatches.length; i < il; i++) {\n            const token = validMatches[i];\n            variables.push({\n                name: token[1],\n                location: token.index,\n                length: token[0].length\n            });\n        }\n    }\n\n    return {string, variables};\n}\n\nexport default replaceVariables;\n","import StreamReader from '@emmetio/stream-reader';\nimport { isNumber } from '@emmetio/stream-reader-utils';\n\nconst DOLLAR      = 36;  // $\nconst COLON       = 58;  // :\nconst ESCAPE      = 92;  // \\\nconst OPEN_BRACE  = 123; // {\nconst CLOSE_BRACE = 125; // }\n\n/**\n * Finds fields in given string and returns object with field-less string\n * and array of fields found\n * @param  {String} string\n * @return {Object}\n */\nfunction parse(string) {\n\tconst stream = new StreamReader(string);\n\tconst fields = [];\n\tlet cleanString = '', offset = 0, pos = 0;\n\tlet code, field;\n\n\twhile (!stream.eof()) {\n\t\tcode = stream.peek();\n\t\tpos = stream.pos;\n\n\t\tif (code === ESCAPE) {\n\t\t\tstream.next();\n\t\t\tstream.next();\n\t\t} else if (field = consumeField(stream, cleanString.length + pos - offset)) {\n\t\t\tfields.push(field);\n\t\t\tcleanString += stream.string.slice(offset, pos) + field.placeholder;\n\t\t\toffset = stream.pos;\n\t\t} else {\n\t\t\tstream.next();\n\t\t}\n\t}\n\n\treturn new FieldString(cleanString + stream.string.slice(offset), fields);\n}\n\n/**\n * Marks given `string` with `fields`: wraps each field range with\n * `${index:placeholder}` (by default) or any other token produced by `token`\n * function, if provided\n * @param  {String} string String to mark\n * @param  {Array} fields Array of field descriptor. A field descriptor is a\n * `{index, location, length}` array. It is important that fields in array\n * must be ordered by their location in string: some fields my refer the same\n * location so they must appear in order that user expects.\n * @param  {Function} [token] Function that generates field token. This function\n * received two arguments: `index` and `placeholder` and should return string\n * @return {String}  String with marked fields\n */\nfunction mark(string, fields, token) {\n\ttoken = token || createToken;\n\n\t// order fields by their location and appearence\n\t// NB field ranges should not overlap! (not supported yet)\n\tconst ordered = fields\n\t.map((field, order) => ({order, field, end: field.location + field.length}))\n\t.sort((a, b) => (a.end - b.end) || (a.order - b.order));\n\n\t// mark ranges in string\n\tlet offset = 0;\n\tconst result = ordered.map(item => {\n\t\tconst placeholder = string.substr(item.field.location, item.field.length);\n\t\tconst prefix = string.slice(offset, item.field.location);\n\t\toffset = item.end;\n\t\treturn prefix + token(item.field.index, placeholder);\n\t});\n\n\treturn result.join('') + string.slice(offset);\n}\n\n/**\n * Creates field token for string\n * @param  {Number} index       Field index\n * @param  {String} placeholder Field placeholder, could be empty string\n * @return {String}\n */\nfunction createToken(index, placeholder) {\n\treturn placeholder ? `\\${${index}:${placeholder}}` : `\\${${index}}`;\n}\n\n/**\n * Consumes field from current stream position: it can be an `$index` or\n * or `${index}` or `${index:placeholder}`\n * @param  {StreamReader} stream\n * @param  {Number}       location Field location in *clean* string\n * @return {Field} Object with `index` and `placeholder` properties if\n * field was successfully consumed, `null` otherwise\n */\nfunction consumeField(stream, location) {\n\tconst start = stream.pos;\n\n\tif (stream.eat(DOLLAR)) {\n\t\t// Possible start of field\n\t\tlet index = consumeIndex(stream);\n\t\tlet placeholder = '';\n\n\t\t// consumed $index placeholder\n\t\tif (index != null) {\n\t\t\treturn new Field(index, placeholder, location);\n\t\t}\n\n\t\tif (stream.eat(OPEN_BRACE)) {\n\t\t\tindex = consumeIndex(stream);\n\t\t\tif (index != null) {\n\t\t\t\tif (stream.eat(COLON)) {\n\t\t\t\t\tplaceholder = consumePlaceholder(stream);\n\t\t\t\t}\n\n\t\t\t\tif (stream.eat(CLOSE_BRACE)) {\n\t\t\t\t\treturn new Field(index, placeholder, location);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// If we reached here then there’s no valid field here, revert\n\t// back to starting position\n\tstream.pos = start;\n}\n\n/**\n * Consumes a placeholder: value right after `:` in field. Could be empty\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumePlaceholder(stream) {\n\tlet code;\n\tconst stack = [];\n\tstream.start = stream.pos;\n\n\twhile (!stream.eof()) {\n\t\tcode = stream.peek();\n\n\t\tif (code === OPEN_BRACE) {\n\t\t\tstack.push(stream.pos);\n\t\t} else if (code === CLOSE_BRACE) {\n\t\t\tif (!stack.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\tstream.next();\n\t}\n\n\tif (stack.length) {\n\t\tthrow stream.error('Unable to find matching \"}\" for curly brace at ' + stack.pop());\n\t}\n\n\treturn stream.current();\n}\n\n/**\n * Consumes integer from current stream position\n * @param  {StreamReader} stream\n * @return {Number}\n */\nfunction consumeIndex(stream) {\n\tstream.start = stream.pos;\n\tif (stream.eatWhile(isNumber)) {\n\t\treturn Number(stream.current());\n\t}\n}\n\nclass Field {\n\tconstructor(index, placeholder, location) {\n\t\tthis.index = index;\n\t\tthis.placeholder = placeholder;\n\t\tthis.location = location;\n\t\tthis.length = this.placeholder.length;\n\t}\n}\n\nclass FieldString {\n\t/**\n\t * @param {String} string\n\t * @param {Field[]} fields\n\t */\n\tconstructor(string, fields) {\n\t\tthis.string = string;\n\t\tthis.fields = fields;\n\t}\n\n\tmark(token) {\n\t\treturn mark(this.string, this.fields, token);\n\t}\n\n\ttoString() {\n\t\treturn this.string;\n\t}\n}\n\nexport default parse;\nexport { mark, createToken };\n//# sourceMappingURL=field-parser.es.js.map\n","import parseFields from '@emmetio/field-parser';\n\nconst defaultFieldsRenderer = text => text;\n\n/**\n * Output node is an object containing generated output for given Emmet\n * abbreviation node. Output node can be passed to various processors that\n * may shape-up final node output. The final output is simply a concatenation\n * of `.open`, `.text` and `.close` properties and its `.before*` and `.after*`\n * satellites\n * @param {Node}     node           Parsed Emmet abbreviation node\n * @param {Function} fieldsRenderer A function for rendering fielded text (text with\n * tabstops) for current node. @see ./render.js for details\n */\nclass OutputNode {\n\tconstructor(node, fieldsRenderer, options) {\n\t\tif (typeof fieldsRenderer === 'object') {\n\t\t\toptions = fieldsRenderer;\n\t\t\tfieldsRenderer = null;\n\t\t}\n\n\t\tthis.node = node;\n\t\tthis._fieldsRenderer = fieldsRenderer || defaultFieldsRenderer;\n\n\t\tthis.open = null;\n\t\tthis.beforeOpen = '';\n\t\tthis.afterOpen = '';\n\n\t\tthis.close = null;\n\t\tthis.beforeClose = '';\n\t\tthis.afterClose = '';\n\n\t\tthis.text = null;\n\t\tthis.beforeText = '';\n\t\tthis.afterText = '';\n\n\t\tthis.indent = '';\n\t\tthis.newline = '';\n\n\t\tif (options) {\n            Object.assign(this, options);\n        }\n\t}\n\n\tclone() {\n\t\treturn new this.constructor(this.node, this);\n\t}\n\n\t/**\n\t * Properly indents given multiline text\n\t * @param {String} text\n\t */\n\tindentText(text) {\n\t\tconst lines = splitByLines(text);\n        if (lines.length === 1) {\n            // no newlines, nothing to indent\n            return text;\n        }\n\n        // No newline and no indent means no formatting at all:\n        // in this case we should replace newlines with spaces\n        const nl = (!this.newline && !this.indent) ? ' ' : this.newline;\n        return lines.map((line, i) => i ? this.indent + line : line).join(nl);\n\t}\n\n\t/**\n\t * Renders given text with fields\n\t * @param {String} text\n\t * @return {String}\n\t */\n\trenderFields(text) {\n\t\treturn this._fieldsRenderer(text);\n\t}\n\n\ttoString(children) {\n\t\tconst open = this._wrap(this.open, this.beforeOpen, this.afterOpen);\n\t\tconst close = this._wrap(this.close, this.beforeClose, this.afterClose);\n\t\tconst text = this._wrap(this.text, this.beforeText, this.afterText);\n\n\t\treturn open + text + (children != null ? children : '') + close;\n\t}\n\n\t_wrap(str, before, after) {\n\t\tbefore = before != null ? before : '';\n\t\tafter = after != null ? after : '';\n\n        // automatically trim whitespace for non-empty wraps\n        if (str != null) {\n            str = before ? str.replace(/^\\s+/, '') : str;\n            str = after ? str.replace(/\\s+$/, '') : str;\n            return before + this.indentText(str) + after;\n        }\n\n        return '';\n\t}\n}\n\n/**\n * Splits given text by lines\n * @param  {String} text\n * @return {String[]}\n */\nfunction splitByLines(text) {\n\treturn (text || '').split(/\\r\\n|\\r|\\n/g);\n}\n\n/**\n * Default output of field (tabstop)\n * @param  {Number} index       Field index\n * @param  {String} placeholder Field placeholder, can be null\n * @return {String}\n */\nconst defaultField = (index, placeholder) => (placeholder || '');\n\n/**\n * Renders given parsed abbreviation `tree` via `formatter` function.\n\n * @param {Node}     tree      Parsed Emmet abbreviation\n * @param {Function} [field]   Optional function to format field/tabstop (@see `defaultField`)\n * @param {Function} formatter Output formatter function. It takes an output node—\n * a special wrapper for parsed node that holds formatting and output properties—\n * and updates its output properties to shape-up node’s output.\n * Function arguments:\n * \t– `outNode`: OutputNode\n * \t– `renderFields`: a helper function that parses fields/tabstops from given\n * \t   text and replaces them with `field` function output.\n * \t   It also takes care about field indicies and ensures that the same indicies\n * \t   from different nodes won’t collide\n */\nfunction render(tree, field, formatter) {\n    if (typeof formatter === 'undefined') {\n        formatter = field;\n        field = null;\n    }\n\n    field = field || defaultField;\n\n    // Each node may contain fields like `${1:placeholder}`.\n\t// Since most modern editors will link all fields with the same\n\t// index, we have to ensure that different nodes has their own indicies.\n\t// We’ll use this `fieldState` object to globally increment field indices\n\t// during output\n\tconst fieldState = { index: 1 };\n\n    const fieldsRenderer = text => text == null\n        ? field(fieldState.index++)\n        : getFieldsModel(text, fieldState).mark(field);\n\n\treturn run(tree.children, formatter, fieldsRenderer);\n}\n\nfunction run(nodes, formatter, fieldsRenderer) {\n\treturn nodes.map(node => {\n\t\tconst outNode = formatter(new OutputNode(node, fieldsRenderer));\n\t\treturn outNode ? outNode.toString(run(node.children, formatter, fieldsRenderer)) : '';\n\t}).join('');\n}\n\n/**\n * Returns fields (tab-stops) model with properly updated indices that won’t\n * collide with fields in other nodes of foprmatted tree\n * @param  {String|Object} text Text to get fields model from or model itself\n * @param  {Object} fieldState Abbreviation tree-wide field state reference\n * @return {Object} Field model\n */\nfunction getFieldsModel(text, fieldState) {\n\tconst model = typeof text === 'object' ? text : parseFields(text);\n    let largestIndex = -1;\n\n    model.fields.forEach(field => {\n\t\tfield.index += fieldState.index;\n\t\tif (field.index > largestIndex) {\n\t\t\tlargestIndex = field.index;\n\t\t}\n\t});\n\n\tif (largestIndex !== -1) {\n\t\tfieldState.index = largestIndex + 1;\n\t}\n\n    return model;\n}\n\nexport default render;\n","import parseFields from '@emmetio/field-parser';\nimport render from '@emmetio/output-renderer';\n\nconst TOKEN       = /^(.*?)([A-Z_]+)(.*?)$/;\nconst TOKEN_OPEN  = 91; // [\nconst TOKEN_CLOSE = 93; // ]\n\n/**\n * A basic templating engine.\n * Takes every `[TOKEN]` from given string and replaces it with\n * `TOKEN` value from given `data` attribute. The token itself may contain\n * various characters between `[`, token name and `]`. Contents of `[...]` will\n * be outputted only if `TOKEN` value is not empty. Also, only `TOKEN` name will\n * be replaced with actual value, all other characters will remain as is.\n *\n * Example:\n * ```\n * template('[<NAME>]', {NAME: 'foo'}) -> \"<foo>\"\n * template('[<NAME>]', {}) -> \"\"\n * ```\n */\nfunction template(str, data) {\n\tif (str == null) {\n\t\treturn str;\n\t}\n\n\t// NB since token may contain inner `[` and `]`, we can’t just use regexp\n\t// for replacement, should manually parse string instead\n\tconst stack = [];\n\tconst replacer = (str, left, token, right) =>\n\t\tdata[token] != null ? left + data[token] + right : '';\n\n\tlet output = '';\n\tlet offset = 0, i = 0;\n\tlet code, lastPos;\n\n\twhile (i < str.length) {\n\t\tcode = str.charCodeAt(i);\n\t\tif (code === TOKEN_OPEN) {\n\t\t\tstack.push(i);\n\t\t} else if (code === TOKEN_CLOSE) {\n\t\t\tlastPos = stack.pop();\n\t\t\tif (!stack.length) {\n\t\t\t\toutput += str.slice(offset, lastPos) +\n\t\t\t\t\tstr.slice(lastPos + 1, i).replace(TOKEN, replacer);\n\t\t\t\toffset = i + 1;\n\t\t\t}\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn output + str.slice(offset);\n}\n\n/**\n * Various utility methods used by formatters\n */\n\n/**\n * Splits given text by lines\n * @param  {String} text\n * @return {String[]}\n */\nfunction splitByLines(text) {\n\treturn (text || '').split(/\\r\\n|\\r|\\n/g);\n}\n\n/**\n * Check if given node is a first child in its parent\n * @param  {Node}  node\n * @return {Boolean}\n */\nfunction isFirstChild(node) {\n\treturn node.parent.firstChild === node;\n}\n\n/**\n * Check if given node is a root node\n * @param  {Node}  node\n * @return {Boolean}\n */\nfunction isRoot(node) {\n\treturn node && !node.parent;\n}\n\n/**\n * Check if given node is a pseudo-snippet: a text-only node with explicitly\n * defined children\n * @param  {Node}  node\n * @return {Boolean}\n */\nfunction isPseudoSnippet(node) {\n\treturn node.isTextOnly && !!node.children.length;\n}\n\n/**\n * Handles pseudo-snippet node.\n * A pseudo-snippet is a text-only node with explicitly defined children.\n * For such case, we have to figure out if pseudo-snippet contains fields\n * (tab-stops) in node value and “split” it: make contents before field with\n * lowest index node’s “open” part and contents after lowest index — “close”\n * part. With this trick a final output will look like node’s children\n * are nested inside node value\n * @param  {OutputNode} outNode\n * @return {Boolean} Returns “true” if given node is a pseudo-snippets,\n * `false` otherwise\n */\nfunction handlePseudoSnippet(outNode) {\n\tconst node = outNode.node; // original abbreviaiton node\n\n\tif (isPseudoSnippet(node)) {\n\t\tconst fieldsModel = parseFields(node.value);\n\t\tconst field = findLowestIndexField(fieldsModel);\n\t\tif (field) {\n\t\t\tconst parts = splitFieldsModel(fieldsModel, field);\n\t\t\toutNode.open = outNode.renderFields(parts[0]);\n\t\t\toutNode.close = outNode.renderFields(parts[1]);\n\t\t} else {\n\t\t\toutNode.text = outNode.renderFields(fieldsModel);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Finds field with lowest index in given text\n * @param  {Object} model\n * @return {Object}\n */\nfunction findLowestIndexField(model) {\n\treturn model.fields.reduce((result, field) =>\n\t\t!result || field.index < result.index ? field : result\n\t\t, null);\n}\n\n/**\n * Splits given fields model in two parts by given field\n * @param  {Object} model\n * @param  {Object} field\n * @return {Array} Two-items array\n */\nfunction splitFieldsModel(model, field) {\n\tconst ix = model.fields.indexOf(field);\n\n\tconst left = new model.constructor(\n\t\tmodel.string.slice(0, field.location),\n\t\tmodel.fields.slice(0, ix)\n\t);\n\n\tconst right = new model.constructor(\n\t\tmodel.string.slice(field.location + field.length),\n\t\tmodel.fields.slice(ix + 1)\n\t);\n\n\treturn [left, right];\n}\n\nconst commentOptions = {\n\t// enable node commenting\n\tenabled: false,\n\n\t// attributes that should trigger node commenting on specific node,\n\t// if commenting is enabled\n\ttrigger: ['id', 'class'],\n\n\t// comment before opening tag\n\tbefore: '',\n\n\t// comment after closing tag\n\tafter: '\\n<!-- /[#ID][.CLASS] -->'\n};\n\n/**\n * Renders given parsed Emmet abbreviation as HTML, formatted according to\n * `profile` options\n * @param  {Node}     tree    Parsed Emmet abbreviation\n * @param  {Profile}  profile Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nfunction html(tree, profile, options) {\n\toptions = Object.assign({}, options);\n\tconst format = getFormatOptions(options);\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = setFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\tif (node.name) {\n\t\t\t\tconst name = profile.name(node.name);\n\t\t\t\tconst attrs = formatAttributes(outNode, profile);\n\n\t\t\t\toutNode.open = `<${name}${attrs}${node.selfClosing ? profile.selfClose() : ''}>`;\n\t\t\t\tif (!node.selfClosing) {\n\t\t\t\t\toutNode.close = `</${name}>`;\n\t\t\t\t}\n\n\t\t\t\tcommentNode(outNode, format.comment);\n\t\t\t}\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(node.value);\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * @param  {OutputNode} outNode Output wrapper of farsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction setFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (shouldFormatNode(node, profile)) {\n\t\toutNode.indent = profile.indent(getIndentLevel(node, profile));\n\t\toutNode.newline = '\\n';\n\t\tconst prefix = outNode.newline + outNode.indent;\n\n\t\t// do not format the very first node in output\n\t\tif (!isRoot(node.parent) || !isFirstChild(node)) {\n\t\t\toutNode.beforeOpen = prefix;\n\t\t\tif (node.isTextOnly) {\n\t\t\t\toutNode.beforeText = prefix;\n\t\t\t}\n\t\t}\n\n\t\tif (hasInnerFormatting(node, profile)) {\n\t\t\tif (!node.isTextOnly) {\n\t\t\t\toutNode.beforeText = prefix + profile.indent(1);\n\t\t\t}\n\t\t\toutNode.beforeClose = prefix;\n\t\t}\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Check if given node should be formatted\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction shouldFormatNode(node, profile) {\n\tif (!profile.get('format')) {\n\t\treturn false;\n\t}\n\n\tif (node.parent.isTextOnly\n\t\t&& node.parent.children.length === 1\n\t\t&& parseFields(node.parent.value).fields.length) {\n\t\t// Edge case: do not format the only child of text-only node,\n\t\t// but only if parent contains fields\n\t\treturn false;\n\t}\n\n\treturn isInline(node, profile) ? shouldFormatInline(node, profile) : true;\n}\n\n/**\n * Check if given inline node should be formatted as well, e.g. it contains\n * enough adjacent siblings that should force formatting\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction shouldFormatInline(node, profile) {\n\tif (!isInline(node, profile)) {\n\t\treturn false;\n\t}\n\n\tif (isPseudoSnippet(node)) {\n\t\treturn true;\n\t}\n\n\t// check if inline node is the next sibling of block-level node\n\tif (node.childIndex === 0) {\n\t\t// first node in parent: format if it’s followed by a block-level element\n\t\tlet next = node;\n\t\twhile (next = next.nextSibling) {\n\t\t\tif (!isInline(next, profile)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (!isInline(node.previousSibling, profile)) {\n\t\t// node is right after block-level element\n\t\treturn true;\n\t}\n\n\tif (profile.get('inlineBreak')) {\n\t\t// check for adjacent inline elements before and after current element\n\t\tlet adjacentInline = 1;\n\t\tlet before = node, after = node;\n\n\t\twhile (isInlineElement((before = before.previousSibling), profile)) {\n\t\t\tadjacentInline++;\n\t\t}\n\n\t\twhile (isInlineElement((after = after.nextSibling), profile)) {\n\t\t\tadjacentInline++;\n\t\t}\n\n\t\tif (adjacentInline >= profile.get('inlineBreak')) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Another edge case: inline node contains node that should receive foramtting\n\tfor (let i = 0, il = node.children.length; i < il; i++) {\n\t\tif (shouldFormatNode(node.children[i], profile)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Check if given node contains inner formatting, e.g. any of its children should\n * be formatted\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction hasInnerFormatting(node, profile) {\n\t// check if node if forced for inner formatting\n\tconst nodeName = (node.name || '').toLowerCase();\n\tif (profile.get('formatForce').indexOf(nodeName) !== -1) {\n\t\treturn true;\n\t}\n\n\t// check if any of children should receive formatting\n\t// NB don’t use `childrent.some()` to reduce memory allocations\n\tfor (let i = 0; i < node.children.length; i++) {\n\t\tif (shouldFormatNode(node.children[i], profile)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Outputs attributes of given abbreviation node as HTML attributes\n * @param  {OutputNode} outNode\n * @param  {Profile}    profile\n * @return {String}\n */\nfunction formatAttributes(outNode, profile) {\n\tconst node = outNode.node;\n\n\treturn node.attributes.map(attr => {\n\t\tif (attr.options.implied && attr.value == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst attrName = profile.attribute(attr.name);\n\t\tlet attrValue = null;\n\n\t\t// handle boolean attributes\n\t\tif (attr.options.boolean || profile.get('booleanAttributes').indexOf(attrName.toLowerCase()) !== -1) {\n\t\t\tif (profile.get('compactBooleanAttributes') && attr.value == null) {\n\t\t\t\treturn ` ${attrName}`;\n\t\t\t} else if (attr.value == null) {\n\t\t\t\tattrValue = attrName;\n\t\t\t}\n\t\t}\n\n\t\tif (attrValue == null) {\n\t\t\tattrValue = outNode.renderFields(attr.value);\n\t\t}\n\n\t\treturn attr.options.before && attr.options.after\n\t\t\t? ` ${attrName}=${attr.options.before+attrValue+attr.options.after}`\n\t\t\t: ` ${attrName}=${profile.quote(attrValue)}`;\n\t}).join('');\n}\n\n/**\n * Check if given node is inline-level\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInline(node, profile) {\n\treturn (node && node.isTextOnly) || isInlineElement(node, profile);\n}\n\n/**\n * Check if given node is inline-level element, e.g. element with explicitly\n * defined node name\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInlineElement(node, profile) {\n\treturn node && profile.isInline(node);\n}\n\n/**\n * Computes indent level for given node\n * @param  {Node} node\n * @param  {Profile} profile\n * @param  {Number} level\n * @return {Number}\n */\nfunction getIndentLevel(node, profile) {\n\t// Increase indent level IF NOT:\n\t// * parent is text-only node\n\t// * there’s a parent node with a name that is explicitly set to decrease level\n\tconst skip = profile.get('formatSkip') || [];\n\tlet level = node.parent.isTextOnly ? -2 : -1;\n\tlet ctx = node;\n\twhile (ctx = ctx.parent) {\n\t\tif (skip.indexOf( (ctx.name || '').toLowerCase() ) === -1) {\n\t\t\tlevel++;\n\t\t}\n\t}\n\n\treturn level < 0 ? 0 : level;\n}\n\n/**\n * Comments given output node, if required\n * @param  {OutputNode} outNode\n * @param  {Object} options\n */\nfunction commentNode(outNode, options) {\n\tconst node = outNode.node;\n\n\tif (!options.enabled || !options.trigger || !node.name) {\n\t\treturn;\n\t}\n\n\tconst attrs = outNode.node.attributes.reduce((out, attr) => {\n\t\tif (attr.name && attr.value != null) {\n\t\t\tout[attr.name.toUpperCase().replace(/-/g, '_')] = attr.value;\n\t\t}\n\n\t\treturn out;\n\t}, {});\n\n\t// add comment only if attribute trigger is present\n\tfor (let i = 0, il = options.trigger.length; i < il; i++) {\n\t\tif (options.trigger[i].toUpperCase() in attrs) {\n\t\t\toutNode.open = template(options.before, attrs) + outNode.open;\n\t\t\tif (outNode.close) {\n\t\t\t\toutNode.close += template(options.after, attrs);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction getFormatOptions(options) {\n\tconst format = Object.assign({}, options && options.format);\n\tformat.comment = Object.assign({}, commentOptions, format.comment);\n\treturn format;\n}\n\nconst reId = /^id$/i;\nconst reClass = /^class$/i;\nconst defaultAttrOptions = {\n\tprimary: attrs => attrs.join(''),\n\tsecondary: attrs => attrs.map(attr => attr.isBoolean ? attr.name : `${attr.name}=${attr.value}`).join(', ')\n};\n\nconst defaultNodeOptions = {\n\topen: null,\n\tclose: null,\n\tomitName: /^div$/i,\n\tattributes: defaultAttrOptions\n};\n\nfunction indentFormat(outNode, profile, options) {\n\toptions = Object.assign({}, defaultNodeOptions, options);\n\tconst node = outNode.node;\n\n\toutNode.indent = profile.indent(getIndentLevel$1(node, profile));\n\toutNode.newline = '\\n';\n\n\t// Do not format the very first node in output\n\tif (!isRoot(node.parent) || !isFirstChild(node)) {\n\t\toutNode.beforeOpen = outNode.newline + outNode.indent;\n\t}\n\n\tif (node.name) {\n\t\tconst data = Object.assign({\n\t\t\tNAME: profile.name(node.name),\n\t\t\tSELF_CLOSE: node.selfClosing ? options.selfClose : null\n\t\t}, getAttributes(outNode, profile, options.attributes));\n\n\t\t// omit tag name if node has primary attributes\n\t\tif (options.omitName && options.omitName.test(data.NAME) && data.PRIMARY_ATTRS) {\n\t\t\tdata.NAME = null;\n\t\t}\n\n\t\tif (options.open != null) {\n\t\t\toutNode.open = template(options.open, data);\n\t\t}\n\n\t\tif (options.close != null) {\n\t\t\toutNode.close = template(options.close, data);\n\t\t}\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats attributes of given node into a string.\n * @param  {OutputNode} node          Output node wrapper\n * @param  {Profile}    profile       Output profile\n * @param  {Object}     options       Additional formatting options\n * @return {String}\n */\nfunction getAttributes(outNode, profile, options) {\n\toptions = Object.assign({}, defaultAttrOptions, options);\n\tconst primary = [], secondary = [];\n\tconst node = outNode.node;\n\n\tnode.attributes.forEach(attr => {\n\t\tif (attr.options.implied && attr.value == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst name = profile.attribute(attr.name);\n\t\tconst value = outNode.renderFields(attr.value);\n\n\t\tif (reId.test(name)) {\n\t\t\tvalue && primary.push(`#${value}`);\n\t\t} else if (reClass.test(name)) {\n\t\t\tvalue && primary.push(`.${value.replace(/\\s+/g, '.')}`);\n\t\t} else {\n\t\t\tconst isBoolean = attr.value == null\n\t\t\t\t&& (attr.options.boolean || profile.get('booleanAttributes').indexOf(name.toLowerCase()) !== -1);\n\n\t\t\tsecondary.push({ name, value, isBoolean });\n\t\t}\n\t});\n\n\treturn {\n\t\tPRIMARY_ATTRS: options.primary(primary) || null,\n\t\tSECONDARY_ATTRS: options.secondary(secondary) || null\n\t};\n}\n\n/**\n * Computes indent level for given node\n * @param  {Node} node\n * @return {Number}\n */\nfunction getIndentLevel$1(node) {\n\tlet level = node.parent.isTextOnly ? -2 : -1;\n\tlet ctx = node;\n\twhile (ctx = ctx.parent) {\n\t\tlevel++;\n\t}\n\n\treturn level < 0 ? 0 : level;\n}\n\nconst reNl = /\\n|\\r/;\n\n/**\n * Renders given parsed Emmet abbreviation as HAML, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nfunction haml(tree, profile, options) {\n\toptions = options || {};\n\tconst nodeOptions = {\n\t\topen: '[%NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)][SELF_CLOSE]',\n\t\tselfClose: '/',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean\n\t\t\t\t\t? `${attr.name}${profile.get('compactBooleanAttributes') ? '' : '=true'}`\n\t\t\t\t\t: `${attr.name}=${profile.quote(attr.value)}`\n\t\t\t\t).join(' ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, HAML is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of parsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n/**\n * Formats value of given node: for multiline text we should add a ` |` suffix\n * at the end of each line. Also ensure that text is perfectly aligned.\n * @param  {Node}    node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n\t\tconst lines = splitByLines(node.value);\n\t\tconst indent = profile.indent(1);\n\t\tconst maxLength = lines.reduce((prev, line) => Math.max(prev, line.length), 0);\n\n\t\treturn lines.map((line, i) => `${i ? indent : ''}${pad(line, maxLength)} |`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n\nfunction pad(text, len) {\n\twhile (text.length < len) {\n\t\ttext += ' ';\n\t}\n\n\treturn text;\n}\n\nconst reNl$1 = /\\n|\\r/;\nconst secondaryAttrs = {\n\tnone:   '[ SECONDARY_ATTRS]',\n\tround:  '[(SECONDARY_ATTRS)]',\n\tcurly:  '[{SECONDARY_ATTRS}]',\n\tsquare: '[[SECONDARY_ATTRS]'\n};\n\n/**\n * Renders given parsed Emmet abbreviation as Slim, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nfunction slim(tree, profile, options) {\n\toptions = options || {};\n\tconst SECONDARY_ATTRS = options.attributeWrap\n\t\t&& secondaryAttrs[options.attributeWrap]\n\t\t|| secondaryAttrs.none;\n\n\tconst booleanAttr = SECONDARY_ATTRS === secondaryAttrs.none\n\t\t? attr => `${attr.name}=true`\n\t\t: attr => attr.name;\n\n\tconst nodeOptions = {\n\t\topen: `[NAME][PRIMARY_ATTRS]${SECONDARY_ATTRS}[SELF_CLOSE]`,\n\t\tselfClose: '/',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean\n\t\t\t\t\t? booleanAttr(attr)\n\t\t\t\t\t: `${attr.name}=${profile.quote(attr.value)}`\n\t\t\t\t).join(' ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting$1(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue$1(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, Slim is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of farsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting$1(outNode, profile) {\n\tconst node = outNode.node;\n\tconst parent = node.parent;\n\n\t// Edge case: a single inline-level child inside node without text:\n\t// allow it to be inlined\n\tif (profile.get('inlineBreak') === 0 && isInline$1(node, profile)\n\t\t&& !isRoot(parent) && parent.value == null && parent.children.length === 1) {\n\t\toutNode.beforeOpen = ': ';\n\t}\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl$1.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats value of given node: for multiline text we should precede each\n * line with `| ` with one-level deep indent\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue$1(node, profile) {\n\tif (node.value != null && reNl$1.test(node.value)) {\n\t\tconst indent = profile.indent(1);\n\t\treturn splitByLines(node.value).map((line, i) => `${indent}${i ? ' ' : '|'} ${line}`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n\n/**\n * Check if given node is inline-level\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInline$1(node, profile) {\n\treturn node && (node.isTextOnly || profile.isInline(node));\n}\n\nconst reNl$2 = /\\n|\\r/;\n\n/**\n * Renders given parsed Emmet abbreviation as Pug, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nfunction pug(tree, profile, options) {\n\toptions = options || {};\n\tconst nodeOptions = {\n\t\topen: '[NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)]',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean ? attr.name : `${attr.name}=${profile.quote(attr.value)}`).join(', ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting$2(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue$2(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, Pug is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of parsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting$2(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl$2.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats value of given node: for multiline text we should precede each\n * line with `| ` with one-level deep indent\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue$2(node, profile) {\n\tif (node.value != null && reNl$2.test(node.value)) {\n\t\tconst indent = profile.indent(1);\n\t\treturn splitByLines(node.value).map(line => `${indent}| ${line}`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n\nconst supportedSyntaxes = { html, haml, slim, pug };\n\n/**\n * Outputs given parsed abbreviation in specified syntax\n * @param {Node}     tree     Parsed abbreviation tree\n * @param {Profile}  profile  Output profile\n * @param {String}   [syntax] Output syntax. If not given, `html` syntax is used\n * @param {Function} options.field A function to output field/tabstop for\n * host editor. This function takes two arguments: `index` and `placeholder` and\n * should return a string that represents tabstop in host editor. By default\n * only a placeholder is returned\n * @example\n * {\n * \tfield(index, placeholder) {\n * \t\t// return field in TextMate-style, e.g. ${1} or ${2:foo}\n * \t\treturn `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n *  }\n * }\n * @return {String}\n */\nfunction index(tree, profile, syntax, options) {\n\tif (typeof syntax === 'object') {\n\t\toptions = syntax;\n\t\tsyntax = null;\n\t}\n\n\tif (!supports(syntax)) {\n\t\t// fallback to HTML if given syntax is not supported\n\t\tsyntax = 'html';\n\t}\n\n\treturn supportedSyntaxes[syntax](tree, profile, options);\n}\n\n/**\n * Check if given syntax is supported\n * @param {String} syntax\n * @return {Boolean}\n */\nfunction supports(syntax) {\n\treturn !!syntax && syntax in supportedSyntaxes;\n}\n\nexport default index;\nexport { supports, template };\n//# sourceMappingURL=markup-formatters.es.js.map\n","'use strict';\n\nimport parseAbbreviation from '@emmetio/abbreviation';\nimport resolveSnippets from '@emmetio/html-snippets-resolver';\nimport transform from '@emmetio/html-transform';\nimport resolveVariables from '@emmetio/variable-resolver';\nimport format from '@emmetio/markup-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = Object.assign({}, config);\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String} Abbreviation to parse\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\treturn parseAbbreviation(abbr)\n\t\t.use(resolveSnippets, config.snippets)\n\t\t.use(resolveVariables, config.variables)\n\t\t.use(transform, config.text, config.options);\n}\n","import { isNumber, isAlpha, eatQuoted, isWhiteSpace } from '@emmetio/stream-reader-utils';\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\n\n/**\n * A wrapper for holding CSS value\n */\nclass CSSValue {\n\tconstructor() {\n\t\tthis.type = 'css-value';\n\t\tthis.value = [];\n\t}\n\n\tget size() {\n\t\treturn this.value.length;\n\t}\n\n\tadd(value) {\n\t\tthis.value.push(value);\n\t}\n\n\thas(value) {\n\t\treturn this.value.indexOf(value) !== -1;\n\t}\n\n\ttoString() {\n\t\treturn this.value.join(' ');\n\t}\n}\n\nconst HASH = 35; // #\nconst DOT  = 46; // .\n\n/**\n * Consumes a color token from given string\n * @param  {StreamReader} stream\n * @return {Color} Returns consumend color object, `undefined` otherwise\n */\nfunction consumeColor(stream) {\n\t// supported color variations:\n\t// #abc   → #aabbccc\n\t// #0     → #000000\n\t// #fff.5 → rgba(255, 255, 255, 0.5)\n\t// #t     → transparent\n\tif (stream.peek() === HASH) {\n\t\tstream.start = stream.pos;\n\t\tstream.next();\n\n\t\tstream.eat(116) /* t */ || stream.eatWhile(isHex);\n\t\tconst base = stream.current();\n\n\t\t// a hex color can be followed by `.num` alpha value\n\t\tstream.start = stream.pos;\n\t\tif (stream.eat(DOT) && !stream.eatWhile(isNumber)) {\n\t\t\tthrow stream.error('Unexpected character for alpha value of color');\n\t\t}\n\n\t\treturn new Color(base, stream.current());\n\t}\n}\n\nclass Color {\n\tconstructor(value, alpha) {\n\t\tthis.type = 'color';\n\t\tthis.raw = value;\n\t\tthis.alpha = Number(alpha != null && alpha !== '' ? alpha : 1);\n\t\tvalue = value.slice(1); // remove #\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tif (value === 't') {\n\t\t\tthis.alpha = 0;\n\t\t} else {\n\t\t\tswitch (value.length) {\n\t\t\t\tcase 0:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tr = g = b = value + value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tr = g = b = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tr = value[0] + value[0];\n\t\t\t\t\tg = value[1] + value[1];\n\t\t\t\t\tb = value[2] + value[2];\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvalue += value;\n\t\t\t\t\tr = value.slice(0, 2);\n\t\t\t\t\tg = value.slice(2, 4);\n\t\t\t\t\tb = value.slice(4, 6);\n\t\t\t}\n\t\t}\n\n\t\tthis.r = parseInt(r, 16);\n\t\tthis.g = parseInt(g, 16);\n\t\tthis.b = parseInt(b, 16);\n\t}\n\n\t/**\n\t * Output current color as hex value\n\t * @param {Boolean} shor Produce short value (e.g. #fff instead of #ffffff), if possible\n\t * @return {String}\n\t */\n\ttoHex(short) {\n\t\tconst fn = (short && isShortHex(this.r) && isShortHex(this.g) && isShortHex(this.b))\n\t\t\t? toShortHex : toHex;\n\n\t\treturn '#' + fn(this.r)  + fn(this.g) + fn(this.b);\n\t}\n\n\t/**\n\t * Output current color as `rgba?(...)` CSS color\n\t * @return {String}\n\t */\n\ttoRGB() {\n\t\tconst values = [this.r, this.g, this.b];\n\t\tif (this.alpha !== 1) {\n\t\t\tvalues.push(this.alpha.toFixed(8).replace(/\\.?0+$/, ''));\n\t\t}\n\n\t\treturn `${values.length === 3 ? 'rgb' : 'rgba'}(${values.join(', ')})`;\n\t}\n\n\ttoString(short) {\n\t\tif (!this.r && !this.g && !this.b && !this.alpha) {\n\t\t\treturn 'transparent';\n\t\t}\n\t\treturn this.alpha === 1 ? this.toHex(short) : this.toRGB();\n\t}\n}\n\n/**\n * Check if given code is a hex value (/0-9a-f/)\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isHex(code) {\n\treturn isNumber(code) || isAlpha(code, 65, 70); // A-F\n}\n\nfunction isShortHex(hex) {\n\treturn !(hex % 17);\n}\n\nfunction toShortHex(num) {\n\treturn (num >> 4).toString(16);\n}\n\nfunction toHex(num) {\n\treturn pad(num.toString(16), 2);\n}\n\nfunction pad(value, len) {\n\twhile (value.length < len) {\n\t\tvalue = '0' + value;\n\t}\n\treturn value;\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaNumericWord(code) {\n\treturn isNumber(code) || isAlphaWord(code);\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaWord(code) {\n\treturn code === 95 /* _ */ || isAlpha(code);\n}\n\nconst PERCENT = 37; // %\nconst DOT$1     = 46; // .\nconst DASH    = 45; // -\n\n/**\n * Consumes numeric CSS value (number with optional unit) from current stream,\n * if possible\n * @param  {StreamReader} stream\n * @return {NumericValue}\n */\nfunction consumeNumericValue(stream) {\n\tstream.start = stream.pos;\n\tif (eatNumber(stream)) {\n\t\tconst num = stream.current();\n\t\tstream.start = stream.pos;\n\n\t\t// eat unit, which can be a % or alpha word\n\t\tstream.eat(PERCENT) || stream.eatWhile(isAlphaWord);\n\t\treturn new NumericValue(num, stream.current());\n\t}\n}\n\n/**\n * A numeric CSS value with optional unit\n */\nclass NumericValue {\n\tconstructor(value, unit) {\n\t\tthis.type = 'numeric';\n\t\tthis.value = Number(value);\n\t\tthis.unit = unit || '';\n\t}\n\n\ttoString() {\n\t\treturn `${this.value}${this.unit}`;\n\t}\n}\n\n/**\n * Eats number value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean} Returns `true` if number was consumed\n */\nfunction eatNumber(stream) {\n\tconst start = stream.pos;\n\tconst negative = stream.eat(DASH);\n\tconst afterNegative = stream.pos;\n\n\tstream.eatWhile(isNumber);\n\t\n\tconst prevPos = stream.pos;\n\tif (stream.eat(DOT$1) && !stream.eatWhile(isNumber)) {\n\t\t// Number followed by a dot, but then no number\n\t\tstream.pos = prevPos;\n\t}\n\n\t// Edge case: consumed dash only: not a number, bail-out\n\tif (stream.pos === afterNegative) {\n\t\tstream.pos = start;\n\t}\n\n\treturn stream.pos !== start;\n}\n\nconst DOLLAR = 36; // $\nconst DASH$1   = 45; // -\nconst AT     = 64; // @\n\n/**\n * Consumes a keyword: either a variable (a word that starts with $ or @) or CSS\n * keyword or shorthand\n * @param  {StreamReader} stream\n * @param  {Boolean} [short] Use short notation for consuming value.\n * The difference between “short” and “full” notation is that first one uses\n * alpha characters only and used for extracting keywords from abbreviation,\n * while “full” notation also supports numbers and dashes\n * @return {String} Consumed variable\n */\nfunction consumeKeyword(stream, short) {\n\tstream.start = stream.pos;\n\n\tif (stream.eat(DOLLAR) || stream.eat(AT)) {\n\t\t// SCSS or LESS variable\n\t\tstream.eatWhile(isVariableName);\n\t} else if (short) {\n\t\tstream.eatWhile(isAlphaWord);\n\t} else {\n\t\tstream.eatWhile(isKeyword);\n\t}\n\n\treturn stream.start !== stream.pos ? new Keyword(stream.current()) : null;\n}\n\nclass Keyword {\n\tconstructor(value) {\n\t\tthis.type = 'keyword';\n\t\tthis.value = value;\n\t}\n\n\ttoString() {\n\t\treturn this.value;\n\t}\n}\n\nfunction isKeyword(code) {\n\treturn isAlphaNumericWord(code) || code === DASH$1;\n}\n\nfunction isVariableName(code) {\n\treturn code === 45 /* - */ || isAlphaNumericWord(code);\n}\n\nconst opt = { throws: true };\n\n/**\n * Consumes 'single' or \"double\"-quoted string from given string, if possible\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumeQuoted(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn new QuotedString(stream.current());\n\t}\n}\n\nclass QuotedString {\n\tconstructor(value) {\n\t\tthis.type = 'string';\n\t\tthis.value = value;\n\t}\n\n\ttoString() {\n\t\treturn this.value;\n\t}\n}\n\nconst LBRACE = 40; // (\nconst RBRACE = 41; // )\nconst COMMA  = 44; // ,\n\n/**\n * Consumes arguments from given string.\n * Arguments are comma-separated list of CSS values inside round braces, e.g.\n * `(1, a2, 'a3')`. Nested lists and quoted strings are supported\n * @param  {StreamReader} stream\n * @return {Array}        Array of arguments, `null` if arguments cannot be consumed\n */\nfunction consumeArgumentList(stream) {\n\tif (!stream.eat(LBRACE)) {\n\t\t// not an argument list\n\t\treturn null;\n\t}\n\n\tlet arg;\n\tconst argsList = [];\n\n\twhile (!stream.eof()) {\n\t\tif (arg = consumeArgument(stream)) {\n\t\t\targsList.push(arg);\n\t\t} else {\n\t\t\t// didn’t consumed argument, expect argument separator or end-of-arguments\n\t\t\tstream.eatWhile(isWhiteSpace);\n\n\t\t\tif (stream.eat(RBRACE)) {\n\t\t\t\t// end of arguments list\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!stream.eat(COMMA)) {\n\t\t\t\tthrow stream.error('Expected , or )');\n\t\t\t}\n\t\t}\n\t}\n\n\treturn argsList;\n}\n\n/**\n * Consumes a single argument. An argument is a `CSSValue`, e.g. it could be\n * a space-separated string of value\n * @param  {StreamReader} stream\n * @return {CSSValue}\n */\nfunction consumeArgument(stream) {\n\tconst result = new CSSValue();\n\tlet value;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\t\tvalue = consumeNumericValue(stream) || consumeColor(stream)\n\t\t\t|| consumeQuoted(stream) || consumeKeywordOrFunction(stream);\n\n\t\tif (!value) {\n\t\t\tbreak;\n\t\t}\n\n\t\tresult.add(value);\n\t}\n\n\treturn result.size ? result : null;\n}\n\n/**\n * Consumes either function call like `foo()` or keyword like `foo`\n * @param  {StreamReader} stream\n * @return {Keyword|FunctionCall}\n */\nfunction consumeKeywordOrFunction(stream) {\n\tconst kw = consumeKeyword(stream);\n\tif (kw) {\n\t\tconst args = consumeArgumentList(stream);\n\t\treturn args ? new FunctionCall(kw.toString(), args) : kw;\n\t}\n}\n\nclass FunctionCall {\n\t/**\n\t * @param {String} name Function name\n\t * @param {Array}  args Function arguments\n\t */\n\tconstructor(name, args) {\n\t\tthis.type = 'function';\n\t\tthis.name = name;\n\t\tthis.args = args || [];\n\t}\n\n\ttoString() {\n\t\treturn `${this.name}(${this.args.join(', ')})`;\n\t}\n}\n\nconst EXCL   = 33; // !\nconst DOLLAR$1 = 36; // $\nconst PLUS   = 43; // +\nconst DASH$2   = 45; // -\nconst COLON  = 58; // :\nconst AT$1     = 64; // @\n\n/**\n * Parses given Emmet CSS abbreviation and returns it as parsed Node tree\n * @param {String} abbr\n * @return {Node}\n */\nfunction index(abbr) {\n\tconst root = new Node();\n\tconst stream = new StreamReader(abbr);\n\n\twhile (!stream.eof()) {\n\t\tlet node = new Node(consumeIdent(stream));\n\t\tnode.value = consumeValue(stream);\n\n\t\tconst args = consumeArgumentList(stream);\n\t\tif (args) {\n\t\t\t// technically, arguments in CSS are anonymous Emmet Node attributes,\n\t\t\t// but since Emmet can support only one anonymous, `null`-name\n\t\t\t// attribute (for good reasons), we’ll use argument index as name\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tnode.setAttribute(String(i), args[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Consume `!important` modifier at the end of expression\n\t\tif (stream.eat(EXCL)) {\n\t\t\tnode.value.add('!');\n\t\t}\n\n\t\troot.appendChild(node);\n\n\t\t// CSS abbreviations cannot be nested, only listed\n\t\tif (!stream.eat(PLUS)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!stream.eof()) {\n\t\tthrow stream.error('Unexpected character');\n\t}\n\n\treturn root;\n}\n\n/**\n * Consumes CSS property identifier from given stream\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumeIdent(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isIdentPrefix);\n\tstream.eatWhile(isIdent);\n\treturn stream.start !== stream.pos ? stream.current() : null;\n}\n\n/**\n * Consumes embedded value from Emmet CSS abbreviation stream\n * @param  {StreamReader} stream\n * @return {CSSValue}\n */\nfunction consumeValue(stream) {\n\tconst values = new CSSValue();\n\tlet value;\n\n\twhile (!stream.eof()) {\n\t\t// use colon as value separator\n\t\tstream.eat(COLON);\n\t\tif (value = consumeNumericValue(stream) || consumeColor(stream)) {\n\t\t\t// edge case: a dash after unit-less numeric value or color should\n\t\t\t// be treated as value separator, not negative sign\n\t\t\tif (!value.unit) {\n\t\t\t\tstream.eat(DASH$2);\n\t\t\t}\n\t\t} else {\n\t\t\tstream.eat(DASH$2);\n\t\t\tvalue = consumeKeyword(stream, true);\n\t\t}\n\n\t\tif (!value) {\n\t\t\tbreak;\n\t\t}\n\n\t\tvalues.add(value);\n\t}\n\n\treturn values;\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isIdent(code) {\n\treturn isAlphaWord(code);\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isIdentPrefix(code) {\n\treturn code === AT$1 || code === DOLLAR$1 || code === EXCL;\n}\n\nexport default index;\n","const DASH = 45; // -\n\n/**\n * Calculates fuzzy match score of how close `abbr` matches given `string`.\n * @param  {String} abbr        Abbreviation to score\n * @param  {String} string      String to match\n * @param  {Number} [fuzziness] Fuzzy factor\n * @return {Number}             Match score\n */\nfunction stringScore(abbr, string) {\n\tabbr = abbr.toLowerCase();\n\tstring = string.toLowerCase();\n\n\tif (abbr === string) {\n\t\treturn 1;\n\t}\n\n\t// a string MUST start with the same character as abbreviation\n\tif (!string || abbr.charCodeAt(0) !== string.charCodeAt(0)) {\n\t\treturn 0;\n\t}\n\n\tconst abbrLength = abbr.length;\n\tconst stringLength = string.length;\n\tlet i = 1, j = 1, score = stringLength;\n\tlet ch1, ch2, found, acronym;\n\n\twhile (i < abbrLength) {\n\t\tch1 = abbr.charCodeAt(i);\n\t\tfound = false;\n\t\tacronym = false;\n\n\t\twhile (j < stringLength) {\n\t\t\tch2 = string.charCodeAt(j);\n\n\t\t\tif (ch1 === ch2) {\n\t\t\t\tfound = true;\n\t\t\t\tscore += (stringLength - j) * (acronym ? 2 : 1);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// add acronym bonus for exactly next match after unmatched `-`\n\t\t\tacronym = ch2 === DASH;\n\t\t\tj++;\n\t\t}\n\n\t\tif (!found) {\n\t\t\tbreak;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn score && score * (i / abbrLength) / sum(stringLength);\n}\n\n/**\n * Calculates sum of first `n` natural numbers, e.g. 1+2+3+...n\n * @param  {Number} n\n * @return {Number}\n */\nfunction sum(n) {\n\treturn n * (n + 1) / 2;\n}\n\nconst reProperty = /^([a-z-]+)(?:\\s*:\\s*([^\\n\\r]+))?$/;\nconst DASH$1 = 45; // -\n\n/**\n * Creates a special structure for resolving CSS properties from plain CSS\n * snippets.\n * Almost all CSS snippets are aliases for real CSS properties with available\n * value variants, optionally separated by `|`. Most values are keywords that\n * can be fuzzy-resolved as well. Some CSS properties are shorthands for other,\n * more specific properties, like `border` and `border-style`. For such cases\n * keywords from more specific properties should be available in shorthands too.\n * @param {Snippet[]} snippets\n * @return {CSSSnippet[]}\n */\nfunction cssSnippets(snippets) {\n\treturn nest( snippets.map(snippet => new CSSSnippet(snippet.key, snippet.value)) );\n}\n\nclass CSSSnippet {\n\tconstructor(key, value) {\n\t\tthis.key = key;\n\t\tthis.value = value;\n\t\tthis.property = null;\n\n\t\t// detect if given snippet is a property\n\t\tconst m = value && value.match(reProperty);\n\t\tif (m) {\n\t\t\tthis.property = m[1];\n\t\t\tthis.value = m[2];\n\t\t}\n\n\t\tthis.dependencies = [];\n\t}\n\n\taddDependency(dep) {\n\t\tthis.dependencies.push(dep);\n\t}\n\n\tget defaultValue() {\n\t\treturn this.value != null ? splitValue(this.value)[0] : null;\n\t}\n\n\t/**\n\t * Returns list of unique keywords for current CSS snippet and its dependencies\n\t * @return {String[]}\n\t */\n\tkeywords() {\n\t\tconst stack = [];\n\t\tconst keywords = new Set();\n\t\tlet i = 0, item, candidates;\n\n\t\tif (this.property) {\n\t\t\t// scan valid CSS-properties only\n\t\t\tstack.push(this);\n\t\t}\n\n\t\twhile (i < stack.length) {\n\t\t\t// NB Keep items in stack instead of push/pop to avoid possible\n\t\t\t// circular references\n\t\t\titem = stack[i++];\n\n\t\t\tif (item.value) {\n\t\t\t\tcandidates = splitValue(item.value).filter(isKeyword);\n\n\t\t\t\t// extract possible keywords from snippet value\n\t\t\t\tfor (let j = 0; j < candidates.length; j++) {\n\t\t\t\t\tkeywords.add(candidates[j].trim());\n\t\t\t\t}\n\n\t\t\t\t// add dependencies into scan stack\n\t\t\t\tfor (let j = 0, deps = item.dependencies; j < deps.length; j++) {\n\t\t\t\t\tif (stack.indexOf(deps[j]) === -1) {\n\t\t\t\t\t\tstack.push(deps[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(keywords);\n\t}\n}\n\n/**\n * Nests more specific CSS properties into shorthand ones, e.g.\n * background-position-x -> background-position -> background\n * @param  {CSSSnippet[]} snippets\n * @return {CSSSnippet[]}\n */\nfunction nest(snippets) {\n\tsnippets = snippets.sort(snippetsSort);\n\tconst stack = [];\n\n\t// For sorted list of CSS properties, create dependency graph where each\n\t// shorthand property contains its more specific one, e.g.\n\t// background -> background-position -> background-position-x\n\tfor (let i = 0, cur, prev; i < snippets.length; i++) {\n\t\tcur = snippets[i];\n\n\t\tif (!cur.property) {\n\t\t\t// not a CSS property, skip it\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if current property belongs to one from parent stack.\n\t\t// Since `snippets` array is sorted, items are perfectly aligned\n\t\t// from shorthands to more specific variants\n\t\twhile (stack.length) {\n\t\t\tprev = stack[stack.length - 1];\n\n\t\t\tif (cur.property.indexOf(prev.property) === 0\n\t\t\t\t&& cur.property.charCodeAt(prev.property.length) === DASH$1) {\n\t\t\t\tprev.addDependency(cur);\n\t\t\t\tstack.push(cur);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tstack.pop();\n\t\t}\n\n\t\tif (!stack.length) {\n\t\t\tstack.push(cur);\n\t\t}\n\t}\n\n\treturn snippets;\n}\n\n/**\n * A sorting function for array of snippets\n * @param  {CSSSnippet} a\n * @param  {CSSSnippet} b\n * @return {Number}\n */\nfunction snippetsSort(a, b) {\n\tif (a.key === b.key) {\n\t\treturn 0;\n\t}\n\n\treturn a.key < b.key ? -1 : 1;\n}\n\n/**\n * Check if given string is a keyword candidate\n * @param  {String}  str\n * @return {Boolean}\n */\nfunction isKeyword(str) {\n\treturn /^\\s*[\\w-]+/.test(str);\n}\n\nfunction splitValue(value) {\n\treturn String(value).split('|');\n}\n\nconst globalKeywords = ['auto', 'inherit', 'unset'];\nconst unitlessProperties = [\n\t'z-index', 'line-height', 'opacity', 'font-weight', 'zoom',\n\t'flex', 'flex-grow', 'flex-shrink'\n];\n\nconst defaultOptions = {\n\tintUnit: 'px',\n\tfloatUnit: 'em',\n\tunitAliases: {\n\t\te :'em',\n\t\tp: '%',\n\t\tx: 'ex',\n\t\tr: 'rem'\n\t},\n\tfuzzySearchMinScore: 0\n};\n\n/**\n * For every node in given `tree`, finds matching snippet from `registry` and\n * updates node with snippet data.\n *\n * This resolver uses fuzzy matching for searching matched snippets and their\n * keyword values.\n */\n\nfunction index(tree, registry, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\toptions.unitAliases = Object.assign({}, defaultOptions.unitAliases, options && options.unitAliases);\n\n\tconst snippets = convertToCSSSnippets(registry);\n\n\ttree.walk(node => resolveNode(node, snippets, options));\n\treturn tree;\n}\n\nfunction convertToCSSSnippets(registry) {\n\treturn cssSnippets(registry.all({type: 'string'}));\n}\n\n/**\n * Resolves given node: finds matched CSS snippets using fuzzy match and resolves\n * keyword aliases from node value\n * @param  {Node} node\n * @param  {CSSSnippet[]} snippets\n * @param  {Object} options\n * @return {Node}\n */\nfunction resolveNode(node, snippets, options) {\n\tif (options.property) {\n\t\t// Resolve as value of given CSS property\n\t\treturn resolveAsPropertyValue(node, snippets.find(snippet => snippet.property === options.property), options);\n\t}\n\n\tconst snippet = findBestMatch(node.name, snippets, 'key', options.fuzzySearchMinScore);\n\n\tif (!snippet) {\n\t\t// Edge case: `!important` snippet\n\t\treturn node.name === '!' ? setNodeAsText(node, '!important') : node;\n\t}\n\n\treturn snippet.property\n\t\t? resolveAsProperty(node, snippet, options)\n\t\t: resolveAsSnippet(node, snippet);\n}\n\n/**\n * Resolves given parsed abbreviation node as CSS property\n * @param {Node} node\n * @param {CSSSnippet} snippet\n * @param  {Object} formatOptions\n * @return {Node}\n */\nfunction resolveAsProperty(node, snippet, formatOptions) {\n\tconst abbr = node.name;\n\tnode.name = snippet.property;\n\n\tif (node.value && typeof node.value === 'object') {\n\t\t// resolve keyword shortcuts\n\t\tconst keywords = snippet.keywords();\n\n\t\tif (!node.value.size) {\n\t\t\t// no value defined, try to resolve unmatched part as a keyword alias\n\t\t\tlet kw = findBestMatch(getUnmatchedPart(abbr, snippet.key), keywords);\n\n\t\t\tif (!kw) {\n\t\t\t\t// no matching value, try to get default one\n\t\t\t\tkw = snippet.defaultValue;\n\t\t\t\tif (kw && kw.indexOf('${') === -1) {\n\t\t\t\t\t// Quick and dirty test for existing field. If not, wrap\n\t\t\t\t\t// default value in a field\n\t\t\t\t\tkw = `\\${1:${kw}}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (kw) {\n\t\t\t\tnode.value.add(kw);\n\t\t\t}\n\t\t} else {\n\t\t\t// replace keyword aliases in current node value\n\t\t\tfor (let i = 0, token; i < node.value.value.length; i++) {\n\t\t\t\ttoken = node.value.value[i];\n\n\t\t\t\tif (token === '!') {\n\t\t\t\t\ttoken = `${!i ? '${1} ' : ''}!important`;\n\t\t\t\t} else if (isKeyword$1(token)) {\n\t\t\t\t\ttoken = findBestMatch(token.value, keywords)\n\t\t\t\t\t\t|| findBestMatch(token.value, globalKeywords)\n\t\t\t\t\t\t|| token;\n\t\t\t\t} else if (isNumericValue(token)) {\n\t\t\t\t\ttoken = resolveNumericValue(node.name, token, formatOptions);\n\t\t\t\t}\n\n\t\t\t\tnode.value.value[i] = token;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn node;\n}\n\n/**\n * Resolves given parsed abbreviation node as a snippet: a plain code chunk\n * @param {Node} node\n * @param {CSSSnippet} snippet\n * @return {Node}\n */\nfunction resolveAsSnippet(node, snippet) {\n\treturn setNodeAsText(node, snippet.value);\n}\n\n/**\n * Resolves given parsed abbreviation node as property value of given `snippet`:\n * tries to find best matching keyword from CSS snippet\n * @param {Node} node\n * @param {CSSSnippet} snippet\n * @param {Object} options\n * @return {Node}\n */\nfunction resolveAsPropertyValue(node, snippet, options) {\n\t// Possible resolved result for CSS property:\n\t// * matched snippet keyword\n\t// * color (starts with #)\n\t// Everything else should result the same as input abbreviation\n\tlet keywords = globalKeywords.slice();\n\tif (snippet) {\n\t\tkeywords = keywords.concat(snippet.keywords());\n\t}\n\n\tconst values = [node.name].concat(node.value.value)\n\t\t.filter(Boolean)\n\t\t.map(value => {\n\t\t\tif (typeof value === 'string' || value.type === 'keyword') {\n\t\t\t\tvalue = String(value);\n\t\t\t\treturn findBestMatch(value, keywords, null, options.fuzzySearchMinScore) || value;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t});\n\n\tnode.name = null;\n\tnode.value.value = values;\n\n\treturn node;\n}\n\n/**\n * Sets given parsed abbreviation node as a text snippet\n * @param {Node} node\n * @param {String} text\n * @return {Node}\n */\nfunction setNodeAsText(node, text) {\n\tnode.name = null;\n\tnode.value = text;\n\treturn node;\n}\n\n/**\n * Finds best matching item from `items` array\n * @param {String} abbr  Abbreviation to match\n * @param {Array}  items List of items for match\n * @param {String} [key] If `items` is a list of objects, use `key` as object\n * property to test against\n * @param {Number} fuzzySearchMinScore The minimum score the best matched item should have to be a valid match.\n * @return {*}\n */\nfunction findBestMatch(abbr, items, key, fuzzySearchMinScore) {\n\tif (!abbr) {\n\t\treturn null;\n\t}\n\n\tlet matchedItem = null;\n\tlet maxScore = 0;\n\tfuzzySearchMinScore = fuzzySearchMinScore || 0;\n\n\tfor (let i = 0, item; i < items.length; i++) {\n\t\titem = items[i];\n\t\tconst score = stringScore(abbr, getScoringPart(item, key));\n\n\t\tif (score === 1) {\n\t\t\t// direct hit, no need to look further\n\t\t\treturn item;\n\t\t}\n\n\t\tif (score && score >= maxScore) {\n\t\t\tmaxScore = score;\n\t\t\tmatchedItem = item;\n\t\t}\n\t}\n\n\treturn maxScore >= fuzzySearchMinScore ? matchedItem : null;\n}\n\nfunction getScoringPart(item, key) {\n\tconst value = item && typeof item === 'object' ? item[key] : item;\n\tconst m = (value || '').match(/^[\\w-@]+/);\n\treturn m ? m[0] : value;\n}\n\n/**\n * Returns a part of `abbr` that wasn’t directly matched agains `string`.\n * For example, if abbreviation `poas` is matched against `position`, the unmatched part will be `as`\n * since `a` wasn’t found in string stream\n * @param {String} abbr\n * @param {String} string\n * @return {String}\n */\nfunction getUnmatchedPart(abbr, string) {\n\tfor (let i = 0, lastPos = 0; i < abbr.length; i++) {\n\t\tlastPos = string.indexOf(abbr[i], lastPos);\n\t\tif (lastPos === -1) {\n\t\t\treturn abbr.slice(i);\n\t\t}\n\t\tlastPos++;\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if given CSS value token is a keyword\n * @param {*} token\n * @return {Boolean}\n */\nfunction isKeyword$1(token) {\n\treturn tokenTypeOf(token, 'keyword');\n}\n\n/**\n * Check if given CSS value token is a numeric value\n * @param  {*}  token\n * @return {Boolean}\n */\nfunction isNumericValue(token) {\n\treturn tokenTypeOf(token, 'numeric');\n}\n\nfunction tokenTypeOf(token, type) {\n\treturn token && typeof token === 'object' && token.type === type;\n}\n\n/**\n * Resolves numeric value for given CSS property\n * @param  {String} property    CSS property name\n * @param  {NumericValue} token CSS numeric value token\n * @param  {Object} formatOptions Formatting options for units\n * @return {NumericValue}\n */\nfunction resolveNumericValue(property, token, formatOptions) {\n\tif (token.unit) {\n\t\ttoken.unit = formatOptions.unitAliases[token.unit] || token.unit;\n\t} else if (token.value !== 0 && unitlessProperties.indexOf(property) === -1) {\n\t\t// use `px` for integers, `em` for floats\n\t\t// NB: num|0 is a quick alternative to Math.round(0)\n\t\ttoken.unit = token.value === (token.value|0) ? formatOptions.intUnit : formatOptions.floatUnit;\n\t}\n\n\treturn token;\n}\n\nexport default index;\nexport { convertToCSSSnippets, stringScore, cssSnippets };\n//# sourceMappingURL=css-snippets-resolver.es.js.map\n","import render from '@emmetio/output-renderer';\nimport parseFields from '@emmetio/field-parser';\n\nconst defaultFormatOptions = {\n\tshortHex: true,\n\tbetween: ': ',\n\tafter: ';'\n};\n\n/**\n * Renders given parsed Emmet CSS abbreviation as CSS-like\n * stylesheet, formatted according to `profile` options\n * @param  {Node}     tree    Parsed Emmet abbreviation\n * @param  {Profile}  profile Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nfunction css(tree, profile, options) {\n\toptions = options || {};\n\tconst formatOpt = Object.assign({}, defaultFormatOptions, options && options.format);\n\n\treturn render(tree, options.field, outNode => {\n\t\tconst node = outNode.node;\n\t\tlet value = stringifyValue(node, formatOpt);\n\n\t\tif (node.attributes.length) {\n\t\t\tconst fieldValues = node.attributes.map(attr => stringifyValue(attr, formatOpt));\n\t\t\tvalue = injectFields(value, fieldValues);\n\t\t}\n\n\t\toutNode.open = node.name && profile.name(node.name);\n\t\toutNode.afterOpen = formatOpt.between;\n\t\toutNode.text = outNode.renderFields(value || null);\n\n\t\tif (outNode.open && (!outNode.text || !outNode.text.endsWith(';'))) {\n\t\t\toutNode.afterText = formatOpt.after;\n\t\t}\n\n\t\tif (profile.get('format')) {\n\t\t\toutNode.newline = '\\n';\n\t\t\tif (tree.lastChild !== node) {\n\t\t\t\toutNode.afterText += outNode.newline;\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Injects given field values at each field of given string\n * @param  {String}   string\n * @param  {String[]} attributes\n * @return {FieldString}\n */\nfunction injectFields(string, values) {\n\tconst fieldsModel = parseFields(string);\n\tconst fieldsAmount = fieldsModel.fields.length;\n\n\tif (fieldsAmount) {\n\t\tvalues = values.slice();\n\t\tif (values.length > fieldsAmount) {\n\t\t\t// More values that output fields: collapse rest values into\n\t\t\t// a single token\n\t\t\tvalues = values.slice(0, fieldsAmount - 1)\n\t\t\t\t.concat(values.slice(fieldsAmount - 1).join(', '));\n\t\t}\n\n\t\twhile (values.length) {\n\t\t\tconst value = values.shift();\n\t\t\tconst field = fieldsModel.fields.shift();\n\t\t\tconst delta = value.length - field.length;\n\n\t\t\tfieldsModel.string = fieldsModel.string.slice(0, field.location)\n\t\t\t\t+ value\n\t\t\t\t+ fieldsModel.string.slice(field.location + field.length);\n\n\t\t\t// Update location of the rest fields in string\n\t\t\tfor (let i = 0, il = fieldsModel.fields.length; i < il; i++) {\n\t\t\t\tfieldsModel.fields[i].location += delta;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fieldsModel;\n}\n\nfunction stringifyValue(node, options) {\n\tif (node.value && typeof node.value === 'object' && node.value.type === 'css-value') {\n\t\treturn node.value.value\n\t\t.map(token => {\n\t\t\tif (token && typeof token === 'object') {\n\t\t\t\treturn token.type === 'color'\n\t\t\t\t\t? token.toString(options.shortHex)\n\t\t\t\t\t: token.toString();\n\t\t\t}\n\n\t\t\treturn String(token);\n\t\t})\n\t\t.join(' ');\n\t}\n\n\treturn node.value != null ? String(node.value) : '';\n}\n\nconst syntaxFormat = {\n\tcss: {\n\t\tbetween: ': ',\n\t\tafter: ';'\n\t},\n\tscss: 'css',\n\tless: 'css',\n\tsass: {\n\t\tbetween: ': ',\n\t\tafter: ''\n\t},\n\tstylus: {\n\t\tbetween: ' ',\n\t\tafter: ''\n\t}\n};\n\n/**\n * Outputs given parsed abbreviation in specified stylesheet syntax\n * @param {Node}     tree     Parsed abbreviation tree\n * @param {Profile}  profile  Output profile\n * @param {String}   [syntax] Output syntax. If not given, `css` syntax is used\n * @param {Function} options.field A function to output field/tabstop for\n * host editor. This function takes two arguments: `index` and `placeholder` and\n * should return a string that represents tabstop in host editor. By default\n * only a placeholder is returned\n * @example\n * {\n * \tfield(index, placeholder) {\n * \t\t// return field in TextMate-style, e.g. ${1} or ${2:foo}\n * \t\treturn `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n *  }\n * }\n * @return {String}\n */\nfunction index(tree, profile, syntax, options) {\n\tif (typeof syntax === 'object') {\n\t\toptions = syntax;\n\t\tsyntax = null;\n\t}\n\n\tif (!supports(syntax)) {\n\t\t// fallback to CSS if given syntax is not supported\n\t\tsyntax = 'css';\n\t}\n\n\toptions = Object.assign({}, options, {\n\t\tformat: getFormat(syntax, options)\n\t});\n\n\t// CSS abbreviations doesn’t support nesting so simply\n\t// output root node children\n\treturn css(tree, profile, options);\n}\n\n/**\n * Check if given syntax is supported\n * @param {String} syntax\n * @return {Boolean}\n */\nfunction supports(syntax) {\n\treturn !!syntax && syntax in syntaxFormat;\n}\n\n/**\n * Returns formatter object for given syntax\n * @param  {String} syntax\n * @param  {Object} [options]\n * @return {Object} Formatter object as defined in `syntaxFormat`\n */\nfunction getFormat(syntax, options) {\n\tlet format = syntaxFormat[syntax];\n\tif (typeof format === 'string') {\n\t\tformat = syntaxFormat[format];\n\t}\n\n\treturn Object.assign({}, format, options && options.format);\n}\n\nexport default index;\nexport { supports };\n//# sourceMappingURL=stylesheet-formatters.es.js.map\n","'use strict';\n\nimport parseAbbreviation from '@emmetio/css-abbreviation';\nimport resolveSnippets from '@emmetio/css-snippets-resolver';\nimport format from '@emmetio/stylesheet-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = config || {};\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String|Node} abbr Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\tif (typeof abbr === 'string') {\n\t\tabbr = parseAbbreviation(abbr);\n\t}\n\n\treturn abbr.use(resolveSnippets, config.snippets, config.options);\n}\n","var html = {\n\t\"a\": \"a[href]\",\n\t\"a:link\": \"a[href='http://${0}']\",\n\t\"a:mail\": \"a[href='mailto:${0}']\",\n\t\"a:tel\": \"a[href='tel:+${0}']\",\n\t\"abbr\": \"abbr[title]\",\n\t\"acr|acronym\": \"acronym[title]\",\n\t\"base\": \"base[href]/\",\n\t\"basefont\": \"basefont/\",\n\t\"br\": \"br/\",\n\t\"frame\": \"frame/\",\n\t\"hr\": \"hr/\",\n\t\"bdo\": \"bdo[dir]\",\n\t\"bdo:r\": \"bdo[dir=rtl]\",\n\t\"bdo:l\": \"bdo[dir=ltr]\",\n\t\"col\": \"col/\",\n\t\"link\": \"link[rel=stylesheet href]/\",\n\t\"link:css\": \"link[href='${1:style}.css']\",\n\t\"link:print\": \"link[href='${1:print}.css' media=print]\",\n\t\"link:favicon\": \"link[rel='shortcut icon' type=image/x-icon href='${1:favicon.ico}']\",\n\t\"link:touch\": \"link[rel=apple-touch-icon href='${1:favicon.png}']\",\n\t\"link:rss\": \"link[rel=alternate type=application/rss+xml title=RSS href='${1:rss.xml}']\",\n\t\"link:atom\": \"link[rel=alternate type=application/atom+xml title=Atom href='${1:atom.xml}']\",\n\t\"link:im|link:import\": \"link[rel=import href='${1:component}.html']\",\n\t\"meta\": \"meta/\",\n\t\"meta:utf\": \"meta[http-equiv=Content-Type content='text/html;charset=UTF-8']\",\n\t\"meta:vp\": \"meta[name=viewport content='width=${1:device-width}, initial-scale=${2:1.0}']\",\n\t\"meta:compat\": \"meta[http-equiv=X-UA-Compatible content='${1:IE=7}']\",\n\t\"meta:edge\": \"meta:compat[content='${1:ie=edge}']\",\n\t\"meta:redirect\": \"meta[http-equiv=refresh content='0; url=${1:http://example.com}']\",\n\t\"style\": \"style\",\n\t\"script\": \"script[!src]\",\n\t\"script:src\": \"script[src]\",\n\t\"img\": \"img[src alt]/\",\n\t\"img:s|img:srcset\": \"img[srcset src alt]\",\n\t\"img:z|img:sizes\": \"img[sizes srcset src alt]\",\n\t\"picture\": \"picture\",\n\t\"src|source\": \"source/\",\n\t\"src:sc|source:src\": \"source[src type]\",\n\t\"src:s|source:srcset\": \"source[srcset]\",\n\t\"src:t|source:type\": \"source[srcset type='${1:image/}']\",\n\t\"src:z|source:sizes\": \"source[sizes srcset]\",\n\t\"src:m|source:media\": \"source[media='(${1:min-width: })' srcset]\",\n\t\"src:mt|source:media:type\": \"source:media[type='${2:image/}']\",\n\t\"src:mz|source:media:sizes\": \"source:media[sizes srcset]\",\n\t\"src:zt|source:sizes:type\": \"source[sizes srcset type='${1:image/}']\",\n\t\"iframe\": \"iframe[src frameborder=0]\",\n\t\"embed\": \"embed[src type]/\",\n\t\"object\": \"object[data type]\",\n\t\"param\": \"param[name value]/\",\n\t\"map\": \"map[name]\",\n\t\"area\": \"area[shape coords href alt]/\",\n\t\"area:d\": \"area[shape=default]\",\n\t\"area:c\": \"area[shape=circle]\",\n\t\"area:r\": \"area[shape=rect]\",\n\t\"area:p\": \"area[shape=poly]\",\n\t\"form\": \"form[action]\",\n\t\"form:get\": \"form[method=get]\",\n\t\"form:post\": \"form[method=post]\",\n\t\"label\": \"label[for]\",\n\t\"input\": \"input[type=${1:text}]/\",\n\t\"inp\": \"input[name=${1} id=${1}]\",\n\t\"input:h|input:hidden\": \"input[type=hidden name]\",\n\t\"input:t|input:text\": \"inp[type=text]\",\n\t\"input:search\": \"inp[type=search]\",\n\t\"input:email\": \"inp[type=email]\",\n\t\"input:url\": \"inp[type=url]\",\n\t\"input:p|input:password\": \"inp[type=password]\",\n\t\"input:datetime\": \"inp[type=datetime]\",\n\t\"input:date\": \"inp[type=date]\",\n\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\"input:month\": \"inp[type=month]\",\n\t\"input:week\": \"inp[type=week]\",\n\t\"input:time\": \"inp[type=time]\",\n\t\"input:tel\": \"inp[type=tel]\",\n\t\"input:number\": \"inp[type=number]\",\n\t\"input:color\": \"inp[type=color]\",\n\t\"input:c|input:checkbox\": \"inp[type=checkbox]\",\n\t\"input:r|input:radio\": \"inp[type=radio]\",\n\t\"input:range\": \"inp[type=range]\",\n\t\"input:f|input:file\": \"inp[type=file]\",\n\t\"input:s|input:submit\": \"input[type=submit value]\",\n\t\"input:i|input:image\": \"input[type=image src alt]\",\n\t\"input:b|input:button\": \"input[type=button value]\",\n    \"input:reset\": \"input:button[type=reset]\",\n\t\"isindex\": \"isindex/\",\n\t\"select\": \"select[name=${1} id=${1}]\",\n\t\"select:d|select:disabled\": \"select[disabled.]\",\n\t\"opt|option\": \"option[value]\",\n\t\"textarea\": \"textarea[name=${1} id=${1} cols=${2:30} rows=${3:10}]\",\n\t\"marquee\": \"marquee[behavior direction]\",\n\t\"menu:c|menu:context\": \"menu[type=context]\",\n\t\"menu:t|menu:toolbar\": \"menu[type=toolbar]\",\n\t\"video\": \"video[src]\",\n\t\"audio\": \"audio[src]\",\n\t\"html:xml\": \"html[xmlns=http://www.w3.org/1999/xhtml]\",\n\t\"keygen\": \"keygen/\",\n\t\"command\": \"command/\",\n\t\"btn:s|button:s|button:submit\" : \"button[type=submit]\",\n\t\"btn:r|button:r|button:reset\" : \"button[type=reset]\",\n\t\"btn:d|button:d|button:disabled\" : \"button[disabled.]\",\n\t\"fst:d|fset:d|fieldset:d|fieldset:disabled\" : \"fieldset[disabled.]\",\n\n\t\"bq\": \"blockquote\",\n\t\"fig\": \"figure\",\n\t\"figc\": \"figcaption\",\n\t\"pic\": \"picture\",\n\t\"ifr\": \"iframe\",\n\t\"emb\": \"embed\",\n\t\"obj\": \"object\",\n\t\"cap\": \"caption\",\n\t\"colg\": \"colgroup\",\n\t\"fst\": \"fieldset\",\n\t\"btn\": \"button\",\n\t\"optg\": \"optgroup\",\n\t\"tarea\": \"textarea\",\n\t\"leg\": \"legend\",\n\t\"sect\": \"section\",\n\t\"art\": \"article\",\n\t\"hdr\": \"header\",\n\t\"ftr\": \"footer\",\n\t\"adr\": \"address\",\n\t\"dlg\": \"dialog\",\n\t\"str\": \"strong\",\n\t\"prog\": \"progress\",\n\t\"mn\": \"main\",\n\t\"tem\": \"template\",\n\t\"fset\": \"fieldset\",\n\t\"datag\": \"datagrid\",\n\t\"datal\": \"datalist\",\n\t\"kg\": \"keygen\",\n\t\"out\": \"output\",\n\t\"det\": \"details\",\n\t\"cmd\": \"command\",\n\n\t\"ri:d|ri:dpr\": \"img:s\",\n\t\"ri:v|ri:viewport\": \"img:z\",\n\t\"ri:a|ri:art\": \"pic>src:m+img\",\n\t\"ri:t|ri:type\": \"pic>src:t+img\",\n\n\t\"!!!\": \"{<!DOCTYPE html>}\",\n\t\"doc\": \"html[lang=${lang}]>(head>meta[charset=${charset}]+meta:vp+meta:edge+title{${1:Document}})+body\",\n\t\"!|html:5\": \"!!!+doc\",\n\n\t\"c\": \"{<!-- ${0} -->}\",\n\t\"cc:ie\": \"{<!--[if IE]>${0}<![endif]-->}\",\n\t\"cc:noie\": \"{<!--[if !IE]><!-->${0}<!--<![endif]-->}\"\n};\n\nvar css = {\n\t\"@f\": \"@font-face {\\n\\tfont-family: ${1};\\n\\tsrc: url(${1});\\n}\",\n\t\"@ff\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\t\"@i|@import\": \"@import url(${0});\",\n\t\"@kf\": \"@keyframes ${1:identifier} {\\n\\t${2}\\n}\",\n\t\"@m|@media\": \"@media ${1:screen} {\\n\\t${0}\\n}\",\n\t\"ac\": \"align-content:flex-start|flex-end|center|space-between|space-around|stretch\",\n\t\"ai\": \"align-items:flex-start|flex-end|center|baseline|stretch\",\n\t\"anim\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode}\",\n\t\"animdel\": \"animation-delay:${1:time}\",\n\t\"animdir\": \"animation-direction:normal|reverse|alternate|alternate-reverse\",\n\t\"animdur\": \"animation-duration:${1:0}s\",\n\t\"animfm\": \"animation-fill-mode:both|forwards|backwards\",\n\t\"animic\": \"animation-iteration-count:1|infinite\",\n\t\"animn\": \"animation-name\",\n\t\"animps\": \"animation-play-state:running|paused\",\n\t\"animtf\": \"animation-timing-function:linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1})\",\n\t\"ap\": \"appearance:none\",\n\t\"as\": \"align-self:auto|flex-start|flex-end|center|baseline|stretch\",\n\t\"b\": \"bottom\",\n\t\"bd\": \"border:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdb\": \"border-bottom:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdbc\": \"border-bottom-color:#${1:000}\",\n\t\"bdbi\": \"border-bottom-image:url(${0})\",\n\t\"bdbk\": \"border-break:close\",\n\t\"bdbli\": \"border-bottom-left-image:url(${0})|continue\",\n\t\"bdblrs\": \"border-bottom-left-radius\",\n\t\"bdbri\": \"border-bottom-right-image:url(${0})|continue\",\n\t\"bdbrrs\": \"border-bottom-right-radius\",\n\t\"bdbs\": \"border-bottom-style\",\n\t\"bdbw\": \"border-bottom-width\",\n\t\"bdc\": \"border-color:#${1:000}\",\n\t\"bdci\": \"border-corner-image:url(${0})|continue\",\n\t\"bdcl\": \"border-collapse:collapse|separate\",\n\t\"bdf\": \"border-fit:repeat|clip|scale|stretch|overwrite|overflow|space\",\n\t\"bdi\": \"border-image:url(${0})\",\n\t\"bdl\": \"border-left:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdlc\": \"border-left-color:#${1:000}\",\n\t\"bdlen\": \"border-length\",\n\t\"bdli\": \"border-left-image:url(${0})\",\n\t\"bdls\": \"border-left-style\",\n\t\"bdlw\": \"border-left-width\",\n\t\"bdr\": \"border-right:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdrc\": \"border-right-color:#${1:000}\",\n\t\"bdri\": \"border-right-image:url(${0})\",\n\t\"bdrs\": \"border-radius\",\n\t\"bdrst\": \"border-right-style\",\n\t\"bdrw\": \"border-right-width\",\n\t\"bds\": \"border-style:none|hidden|dotted|dashed|solid|double|dot-dash|dot-dot-dash|wave|groove|ridge|inset|outset\",\n\t\"bdsp\": \"border-spacing\",\n\t\"bdt\": \"border-top:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdtc\": \"border-top-color:#${1:000}\",\n\t\"bdti\": \"border-top-image:url(${0})\",\n\t\"bdtli\": \"border-top-left-image:url(${0})|continue\",\n\t\"bdtlrs\": \"border-top-left-radius\",\n\t\"bdtri\": \"border-top-right-image:url(${0})|continue\",\n\t\"bdtrrs\": \"border-top-right-radius\",\n\t\"bdts\": \"border-top-style\",\n\t\"bdtw\": \"border-top-width\",\n\t\"bdw\": \"border-width\",\n\t\"bfv\": \"backface-visibility:hidden|visible\",\n\t\"bg\": \"background:#${1:000}\",\n\t\"bga\": \"background-attachment:fixed|scroll\",\n\t\"bgbk\": \"background-break:bounding-box|each-box|continuous\",\n\t\"bgc\": \"background-color:#${1:fff}\",\n\t\"bgcp\": \"background-clip:padding-box|border-box|content-box|no-clip\",\n\t\"bgi\": \"background-image:url(${0})\",\n\t\"bgo\": \"background-origin:padding-box|border-box|content-box\",\n\t\"bgp\": \"background-position:${1:0} ${2:0}\",\n\t\"bgpx\": \"background-position-x\",\n\t\"bgpy\": \"background-position-y\",\n\t\"bgr\": \"background-repeat:no-repeat|repeat-x|repeat-y|space|round\",\n\t\"bgsz\": \"background-size:contain|cover\",\n\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} #${5:000}|none\",\n\t\"bxsz\": \"box-sizing:border-box|content-box|border-box\",\n\t\"c\": \"color:#${1:000}\",\n\t\"cl\": \"clear:both|left|right|none\",\n\t\"cm\": \"/* ${0} */\",\n\t\"cnt\": \"content:'${0}'|normal|open-quote|no-open-quote|close-quote|no-close-quote|attr(${0})|counter(${0})|counters({$0})\",\n\t\"coi\": \"counter-increment\",\n\t\"colm\": \"columns\",\n\t\"colmc\": \"column-count\",\n\t\"colmf\": \"column-fill\",\n\t\"colmg\": \"column-gap\",\n\t\"colmr\": \"column-rule\",\n\t\"colmrc\": \"column-rule-color\",\n\t\"colmrs\": \"column-rule-style\",\n\t\"colmrw\": \"column-rule-width\",\n\t\"colms\": \"column-span\",\n\t\"colmw\": \"column-width\",\n\t\"cor\": \"counter-reset\",\n\t\"cp\": \"clip:auto|rect(${1:top} ${2:right} ${3:bottom} ${4:left})\",\n\t\"cps\": \"caption-side:top|bottom\",\n\t\"cur\": \"cursor:pointer|auto|default|crosshair|hand|help|move|pointer|text\",\n\t\"d\": \"display:block|none|flex|inline-flex|inline|inline-block|list-item|run-in|compact|table|inline-table|table-caption|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group|table-cell|ruby|ruby-base|ruby-base-group|ruby-text|ruby-text-group\",\n\t\"ec\": \"empty-cells:show|hide\",\n\t\"f\": \"font:${1:1em} ${2:sans-serif}\",\n\t\"fef\": \"font-effect:none|engrave|emboss|outline\",\n\t\"fem\": \"font-emphasize\",\n\t\"femp\": \"font-emphasize-position:before|after\",\n\t\"fems\": \"font-emphasize-style:none|accent|dot|circle|disc\",\n\t\"ff\": \"font-family:serif|sans-serif|cursive|fantasy|monospace\",\n\t\"fl\": \"float:left|right|none\",\n\t\"fs\": \"font-style:italic|normal|oblique\",\n\t\"fsm\": \"font-smoothing:antialiased|subpixel-antialiased|none\",\n\t\"fst\": \"font-stretch:normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded\",\n\t\"fv\": \"font-variant:normal|small-caps\",\n\t\"fw\": \"font-weight:normal|bold|bolder|lighter\",\n\t\"fx\": \"flex\",\n\t\"fxb\": \"flex-basis:fill|max-content|min-content|fit-content|content\",\n\t\"fxd\": \"flex-direction:row|row-reverse|column|column-reverse\",\n\t\"fxf\": \"flex-flow\",\n\t\"fxg\": \"flex-grow\",\n\t\"fxsh\": \"flex-shrink\",\n\t\"fxw\": \"flex-wrap:nowrap|wrap|wrap-reverse\",\n\t\"fz\": \"font-size\",\n\t\"fza\": \"font-size-adjust\",\n\t\"h\": \"height\",\n\t\"jc\": \"justify-content:flex-start|flex-end|center|space-between|space-around\",\n\t\"l\": \"left\",\n\t\"lg\": \"background-image:linear-gradient(${1})\",\n\t\"lh\": \"line-height\",\n\t\"lis\": \"list-style\",\n\t\"lisi\": \"list-style-image\",\n\t\"lisp\": \"list-style-position:inside|outside\",\n\t\"list\": \"list-style-type:disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman\",\n\t\"lts\": \"letter-spacing:normal\",\n\t\"m\": \"margin\",\n\t\"mah\": \"max-height\",\n\t\"mar\": \"max-resolution\",\n\t\"maw\": \"max-width\",\n\t\"mb\": \"margin-bottom\",\n\t\"mih\": \"min-height\",\n\t\"mir\": \"min-resolution\",\n\t\"miw\": \"min-width\",\n\t\"ml\": \"margin-left\",\n\t\"mr\": \"margin-right\",\n\t\"mt\": \"margin-top\",\n\t\"ol\": \"outline\",\n\t\"olc\": \"outline-color:#${1:000}|invert\",\n\t\"olo\": \"outline-offset\",\n\t\"ols\": \"outline-style:none|dotted|dashed|solid|double|groove|ridge|inset|outset\",\n\t\"olw\": \"outline-width|thin|medium|thick\",\n\t\"op\": \"opacity\",\n\t\"ord\": \"order\",\n\t\"ori\": \"orientation:landscape|portrait\",\n\t\"orp\": \"orphans\",\n\t\"ov\": \"overflow:hidden|visible|hidden|scroll|auto\",\n\t\"ovs\": \"overflow-style:scrollbar|auto|scrollbar|panner|move|marquee\",\n\t\"ovx\": \"overflow-x:hidden|visible|hidden|scroll|auto\",\n\t\"ovy\": \"overflow-y:hidden|visible|hidden|scroll|auto\",\n\t\"p\": \"padding\",\n\t\"pb\": \"padding-bottom\",\n\t\"pgba\": \"page-break-after:auto|always|left|right\",\n\t\"pgbb\": \"page-break-before:auto|always|left|right\",\n\t\"pgbi\": \"page-break-inside:auto|avoid\",\n\t\"pl\": \"padding-left\",\n\t\"pos\": \"position:relative|absolute|relative|fixed|static\",\n\t\"pr\": \"padding-right\",\n\t\"pt\": \"padding-top\",\n\t\"q\": \"quotes\",\n\t\"qen\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019'\",\n\t\"qru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C'\",\n\t\"r\": \"right\",\n\t\"rsz\": \"resize:none|both|horizontal|vertical\",\n\t\"t\": \"top\",\n\t\"ta\": \"text-align:left|center|right|justify\",\n\t\"tal\": \"text-align-last:left|center|right\",\n\t\"tbl\": \"table-layout:fixed\",\n\t\"td\": \"text-decoration:none|underline|overline|line-through\",\n\t\"te\": \"text-emphasis:none|accent|dot|circle|disc|before|after\",\n\t\"th\": \"text-height:auto|font-size|text-size|max-size\",\n\t\"ti\": \"text-indent\",\n\t\"tj\": \"text-justify:auto|inter-word|inter-ideograph|inter-cluster|distribute|kashida|tibetan\",\n\t\"to\": \"text-outline:${1:0} ${2:0} ${3:#000}\",\n\t\"tov\": \"text-overflow:ellipsis|clip\",\n\t\"tr\": \"text-replace\",\n\t\"trf\": \"transform:${1}|skewX(${1:angle})|skewY(${1:angle})|scale(${1:x}, ${2:y})|scaleX(${1:x})|scaleY(${1:y})|scaleZ(${1:z})|scale3d(${1:x}, ${2:y}, ${3:z})|rotate(${1:angle})|rotateX(${1:angle})|rotateY(${1:angle})|rotateZ(${1:angle})|translate(${1:x}, ${2:y})|translateX(${1:x})|translateY(${1:y})|translateZ(${1:z})|translate3d(${1:tx}, ${2:ty}, ${3:tz})\",\n\t\"trfo\": \"transform-origin\",\n\t\"trfs\": \"transform-style:preserve-3d\",\n\t\"trs\": \"transition:${1:prop} ${2:time}\",\n\t\"trsde\": \"transition-delay:${1:time}\",\n\t\"trsdu\": \"transition-duration:${1:time}\",\n\t\"trsp\": \"transition-property:${1:prop}\",\n\t\"trstf\": \"transition-timing-function:${1:fn}\",\n\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000}\",\n\t\"tt\": \"text-transform:uppercase|lowercase|capitalize|none\",\n\t\"tw\": \"text-wrap:none|normal|unrestricted|suppress\",\n\t\"us\": \"user-select:none\",\n\t\"v\": \"visibility:hidden|visible|collapse\",\n\t\"va\": \"vertical-align:top|super|text-top|middle|baseline|bottom|text-bottom|sub\",\n\t\"w\": \"width\",\n\t\"whs\": \"white-space:nowrap|pre|pre-wrap|pre-line|normal\",\n\t\"whsc\": \"white-space-collapse:normal|keep-all|loose|break-strict|break-all\",\n\t\"wid\": \"widows\",\n\t\"wm\": \"writing-mode:lr-tb|lr-tb|lr-bt|rl-tb|rl-bt|tb-rl|tb-lr|bt-lr|bt-rl\",\n\t\"wob\": \"word-break:normal|keep-all|break-all\",\n\t\"wos\": \"word-spacing\",\n\t\"wow\": \"word-wrap:none|unrestricted|suppress|break-word|normal\",\n\t\"z\": \"z-index\",\n\t\"zom\": \"zoom:1\"\n};\n\nvar xsl = {\n    \"tm|tmatch\": \"xsl:template[match mode]\",\n    \"tn|tname\": \"xsl:template[name]\",\n    \"call\": \"xsl:call-template[name]\",\n    \"ap\": \"xsl:apply-templates[select mode]\",\n    \"api\": \"xsl:apply-imports\",\n    \"imp\": \"xsl:import[href]\",\n    \"inc\": \"xsl:include[href]\",\n    \"ch\": \"xsl:choose\",\n    \"wh|xsl:when\": \"xsl:when[test]\",\n    \"ot\": \"xsl:otherwise\",\n    \"if\": \"xsl:if[test]\",\n    \"par\": \"xsl:param[name]\",\n    \"pare\": \"xsl:param[name select]\",\n    \"var\": \"xsl:variable[name]\",\n    \"vare\": \"xsl:variable[name select]\",\n    \"wp\": \"xsl:with-param[name select]\",\n    \"key\": \"xsl:key[name match use]\",\n    \"elem\": \"xsl:element[name]\",\n    \"attr\": \"xsl:attribute[name]\",\n    \"attrs\": \"xsl:attribute-set[name]\",\n    \"cp\": \"xsl:copy[select]\",\n    \"co\": \"xsl:copy-of[select]\",\n    \"val\": \"xsl:value-of[select]\",\n    \"for|each\": \"xsl:for-each[select]\",\n    \"tex\": \"xsl:text\",\n    \"com\": \"xsl:comment\",\n    \"msg\": \"xsl:message[terminate=no]\",\n    \"fall\": \"xsl:fallback\",\n    \"num\": \"xsl:number[value]\",\n    \"nam\": \"namespace-alias[stylesheet-prefix result-prefix]\",\n    \"pres\": \"xsl:preserve-space[elements]\",\n    \"strip\": \"xsl:strip-space[elements]\",\n    \"proc\": \"xsl:processing-instruction[name]\",\n    \"sort\": \"xsl:sort[select order]\",\n    \"choose\": \"xsl:choose>xsl:when+xsl:otherwise\",\n    \"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\",\n    \"!!!\": \"{<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>}\"\n};\n\nvar index = { html, css, xsl };\n\nexport default index;\n","import resolveImplicitTag from '@emmetio/implicit-tag';\n\nvar latin = {\n\t\"common\": [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipisicing\", \"elit\"],\n\t\"words\": [\"exercitationem\", \"perferendis\", \"perspiciatis\", \"laborum\", \"eveniet\",\n\t\t\"sunt\", \"iure\", \"nam\", \"nobis\", \"eum\", \"cum\", \"officiis\", \"excepturi\",\n\t\t\"odio\", \"consectetur\", \"quasi\", \"aut\", \"quisquam\", \"vel\", \"eligendi\",\n\t\t\"itaque\", \"non\", \"odit\", \"tempore\", \"quaerat\", \"dignissimos\",\n\t\t\"facilis\", \"neque\", \"nihil\", \"expedita\", \"vitae\", \"vero\", \"ipsum\",\n\t\t\"nisi\", \"animi\", \"cumque\", \"pariatur\", \"velit\", \"modi\", \"natus\",\n\t\t\"iusto\", \"eaque\", \"sequi\", \"illo\", \"sed\", \"ex\", \"et\", \"voluptatibus\",\n\t\t\"tempora\", \"veritatis\", \"ratione\", \"assumenda\", \"incidunt\", \"nostrum\",\n\t\t\"placeat\", \"aliquid\", \"fuga\", \"provident\", \"praesentium\", \"rem\",\n\t\t\"necessitatibus\", \"suscipit\", \"adipisci\", \"quidem\", \"possimus\",\n\t\t\"voluptas\", \"debitis\", \"sint\", \"accusantium\", \"unde\", \"sapiente\",\n\t\t\"voluptate\", \"qui\", \"aspernatur\", \"laudantium\", \"soluta\", \"amet\",\n\t\t\"quo\", \"aliquam\", \"saepe\", \"culpa\", \"libero\", \"ipsa\", \"dicta\",\n\t\t\"reiciendis\", \"nesciunt\", \"doloribus\", \"autem\", \"impedit\", \"minima\",\n\t\t\"maiores\", \"repudiandae\", \"ipsam\", \"obcaecati\", \"ullam\", \"enim\",\n\t\t\"totam\", \"delectus\", \"ducimus\", \"quis\", \"voluptates\", \"dolores\",\n\t\t\"molestiae\", \"harum\", \"dolorem\", \"quia\", \"voluptatem\", \"molestias\",\n\t\t\"magni\", \"distinctio\", \"omnis\", \"illum\", \"dolorum\", \"voluptatum\", \"ea\",\n\t\t\"quas\", \"quam\", \"corporis\", \"quae\", \"blanditiis\", \"atque\", \"deserunt\",\n\t\t\"laboriosam\", \"earum\", \"consequuntur\", \"hic\", \"cupiditate\",\n\t\t\"quibusdam\", \"accusamus\", \"ut\", \"rerum\", \"error\", \"minus\", \"eius\",\n\t\t\"ab\", \"ad\", \"nemo\", \"fugit\", \"officia\", \"at\", \"in\", \"id\", \"quos\",\n\t\t\"reprehenderit\", \"numquam\", \"iste\", \"fugiat\", \"sit\", \"inventore\",\n\t\t\"beatae\", \"repellendus\", \"magnam\", \"recusandae\", \"quod\", \"explicabo\",\n\t\t\"doloremque\", \"aperiam\", \"consequatur\", \"asperiores\", \"commodi\",\n\t\t\"optio\", \"dolor\", \"labore\", \"temporibus\", \"repellat\", \"veniam\",\n\t\t\"architecto\", \"est\", \"esse\", \"mollitia\", \"nulla\", \"a\", \"similique\",\n\t\t\"eos\", \"alias\", \"dolore\", \"tenetur\", \"deleniti\", \"porro\", \"facere\",\n\t\t\"maxime\", \"corrupti\"]\n};\n\nvar ru = {\n\t\"common\": [\"далеко-далеко\", \"за\", \"словесными\", \"горами\", \"в стране\", \"гласных\", \"и согласных\", \"живут\", \"рыбные\", \"тексты\"],\n\t\"words\": [\"вдали\", \"от всех\", \"они\", \"буквенных\", \"домах\", \"на берегу\", \"семантика\",\n\t\t\"большого\", \"языкового\", \"океана\", \"маленький\", \"ручеек\", \"даль\",\n\t\t\"журчит\", \"по всей\", \"обеспечивает\", \"ее\",\"всеми\", \"необходимыми\",\n\t\t\"правилами\", \"эта\", \"парадигматическая\", \"страна\", \"которой\", \"жаренные\",\n\t\t\"предложения\", \"залетают\", \"прямо\", \"рот\", \"даже\", \"всемогущая\",\n\t\t\"пунктуация\", \"не\", \"имеет\", \"власти\", \"над\", \"рыбными\", \"текстами\",\n\t\t\"ведущими\", \"безорфографичный\", \"образ\", \"жизни\", \"однажды\", \"одна\",\n\t\t\"маленькая\", \"строчка\",\"рыбного\", \"текста\", \"имени\", \"lorem\", \"ipsum\",\n\t\t\"решила\", \"выйти\", \"большой\", \"мир\", \"грамматики\", \"великий\", \"оксмокс\",\n\t\t\"предупреждал\", \"о\", \"злых\", \"запятых\", \"диких\", \"знаках\", \"вопроса\",\n\t\t\"коварных\", \"точках\", \"запятой\", \"но\", \"текст\", \"дал\", \"сбить\",\n\t\t\"себя\", \"толку\", \"он\", \"собрал\", \"семь\", \"своих\", \"заглавных\", \"букв\",\n\t\t\"подпоясал\", \"инициал\", \"за\", \"пояс\", \"пустился\", \"дорогу\",\n\t\t\"взобравшись\", \"первую\", \"вершину\", \"курсивных\", \"гор\", \"бросил\",\n\t\t\"последний\", \"взгляд\", \"назад\", \"силуэт\", \"своего\", \"родного\", \"города\",\n\t\t\"буквоград\", \"заголовок\", \"деревни\", \"алфавит\", \"подзаголовок\", \"своего\",\n\t\t\"переулка\", \"грустный\", \"реторический\", \"вопрос\", \"скатился\", \"его\",\n\t\t\"щеке\", \"продолжил\", \"свой\", \"путь\", \"дороге\", \"встретил\", \"рукопись\",\n\t\t\"она\", \"предупредила\",  \"моей\", \"все\", \"переписывается\", \"несколько\",\n\t\t\"раз\", \"единственное\", \"что\", \"меня\", \"осталось\", \"это\", \"приставка\",\n\t\t\"возвращайся\", \"ты\", \"лучше\", \"свою\", \"безопасную\", \"страну\", \"послушавшись\",\n\t\t\"рукописи\", \"наш\", \"продолжил\", \"свой\", \"путь\", \"вскоре\", \"ему\",\n\t\t\"повстречался\", \"коварный\", \"составитель\", \"рекламных\", \"текстов\",\n\t\t\"напоивший\", \"языком\", \"речью\", \"заманивший\", \"свое\", \"агентство\",\n\t\t\"которое\", \"использовало\", \"снова\", \"снова\", \"своих\", \"проектах\",\n\t\t\"если\", \"переписали\", \"то\", \"живет\", \"там\", \"до\", \"сих\", \"пор\"]\n};\n\nvar sp = {\n\t\"common\": [\"mujer\", \"uno\", \"dolor\", \"más\", \"de\", \"poder\", \"mismo\", \"si\"],\n\t\"words\": [\"ejercicio\", \"preferencia\", \"perspicacia\", \"laboral\", \"paño\",\n\t\t\"suntuoso\", \"molde\", \"namibia\", \"planeador\", \"mirar\", \"demás\", \"oficinista\", \"excepción\",\n\t\t\"odio\", \"consecuencia\", \"casi\", \"auto\", \"chicharra\", \"velo\", \"elixir\",\n\t\t\"ataque\", \"no\", \"odio\", \"temporal\", \"cuórum\", \"dignísimo\",\n\t\t\"facilismo\", \"letra\", \"nihilista\", \"expedición\", \"alma\", \"alveolar\", \"aparte\",\n\t\t\"león\", \"animal\", \"como\", \"paria\", \"belleza\", \"modo\", \"natividad\",\n\t\t\"justo\", \"ataque\", \"séquito\", \"pillo\", \"sed\", \"ex\", \"y\", \"voluminoso\",\n\t\t\"temporalidad\", \"verdades\", \"racional\", \"asunción\", \"incidente\", \"marejada\",\n\t\t\"placenta\", \"amanecer\", \"fuga\", \"previsor\", \"presentación\", \"lejos\",\n\t\t\"necesariamente\", \"sospechoso\", \"adiposidad\", \"quindío\", \"pócima\",\n\t\t\"voluble\", \"débito\", \"sintió\", \"accesorio\", \"falda\", \"sapiencia\",\n\t\t\"volutas\", \"queso\", \"permacultura\", \"laudo\", \"soluciones\", \"entero\",\n\t\t\"pan\", \"litro\", \"tonelada\", \"culpa\", \"libertario\", \"mosca\", \"dictado\",\n\t\t\"reincidente\", \"nascimiento\", \"dolor\", \"escolar\", \"impedimento\", \"mínima\",\n\t\t\"mayores\", \"repugnante\", \"dulce\", \"obcecado\", \"montaña\", \"enigma\",\n\t\t\"total\", \"deletéreo\", \"décima\", \"cábala\", \"fotografía\", \"dolores\",\n\t\t\"molesto\", \"olvido\", \"paciencia\", \"resiliencia\", \"voluntad\", \"molestias\",\n\t\t\"magnífico\", \"distinción\", \"ovni\", \"marejada\", \"cerro\", \"torre\", \"y\",\n\t\t\"abogada\", \"manantial\", \"corporal\", \"agua\", \"crepúsculo\", \"ataque\", \"desierto\",\n\t\t\"laboriosamente\", \"angustia\", \"afortunado\", \"alma\", \"encefalograma\",\n\t\t\"materialidad\", \"cosas\", \"o\", \"renuncia\", \"error\", \"menos\", \"conejo\",\n\t\t\"abadía\", \"analfabeto\", \"remo\", \"fugacidad\", \"oficio\", \"en\", \"almácigo\", \"vos\", \"pan\",\n\t\t\"represión\", \"números\", \"triste\", \"refugiado\", \"trote\", \"inventor\",\n\t\t\"corchea\", \"repelente\", \"magma\", \"recusado\", \"patrón\", \"explícito\",\n\t\t\"paloma\", \"síndrome\", \"inmune\", \"autoinmune\", \"comodidad\",\n\t\t\"ley\", \"vietnamita\", \"demonio\", \"tasmania\", \"repeler\", \"apéndice\",\n\t\t\"arquitecto\", \"columna\", \"yugo\", \"computador\", \"mula\", \"a\", \"propósito\",\n\t\t\"fantasía\", \"alias\", \"rayo\", \"tenedor\", \"deleznable\", \"ventana\", \"cara\",\n\t\t\"anemia\", \"corrupto\"]\n};\n\nconst langs = { latin, ru, sp };\n\nconst defaultOptions = {\n\twordCount: 30,\n\tskipCommon: false,\n\tlang: 'latin'\n};\n\n/**\n * Replaces given parsed Emmet abbreviation node with nodes filled with\n * Lorem Ipsum stub text.\n * @param {Node} node\n * @return {Node}\n */\nvar index = function(node, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\tconst dict = langs[options.lang] || langs.latin;\n    const startWithCommon = !options.skipCommon && !isRepeating(node);\n\n\tif (!node.repeat && !isRoot(node.parent)) {\n\t\t// non-repeating element, insert text stub as a content of parent node\n\t\t// and remove current one\n\t\tnode.parent.value = paragraph(dict, options.wordCount, startWithCommon);\n\t\tnode.remove();\n\t} else {\n\t\t// Replace named node with generated content\n\t\tnode.value = paragraph(dict, options.wordCount, startWithCommon);\n\t\tnode.name = node.parent.name ? resolveImplicitTag(node.parent.name) : null;\n\t}\n\n\treturn node;\n};\n\nfunction isRoot(node) {\n\treturn !node.parent;\n}\n\n/**\n * Returns random integer between <code>from</code> and <code>to</code> values\n * @param {Number} from\n * @param {Number} to\n * @returns {Number}\n */\nfunction rand(from, to) {\n\treturn Math.floor(Math.random() * (to - from) + from);\n}\n\n/**\n * @param {Array} arr\n * @param {Number} count\n * @returns {Array}\n */\nfunction sample(arr, count) {\n\tconst len = arr.length;\n\tconst iterations = Math.min(len, count);\n\tconst result = new Set();\n\n\twhile (result.size < iterations) {\n\t\tresult.add(arr[rand(0, len)]);\n\t}\n\n\treturn Array.from(result);\n}\n\nfunction choice(val) {\n\treturn val[rand(0, val.length - 1)];\n}\n\nfunction sentence(words, end) {\n\tif (words.length) {\n\t\twords = [capitalize(words[0])].concat(words.slice(1));\n\t}\n\n\treturn words.join(' ') + (end || choice('?!...')); // more dots than question marks\n}\n\nfunction capitalize(word) {\n\treturn word[0].toUpperCase() + word.slice(1);\n}\n\n/**\n * Insert commas at randomly selected words. This function modifies values\n * inside <code>words</code> array\n * @param {Array} words\n */\nfunction insertCommas(words) {\n\tif (words.length < 2) {\n\t\treturn words;\n\t}\n\n\twords = words.slice();\n\tconst len = words.length;\n\tconst hasComma = /,$/;\n\tlet totalCommas = 0;\n\n\tif (len > 3 && len <= 6) {\n\t\ttotalCommas = rand(0, 1);\n\t} else if (len > 6 && len <= 12) {\n\t\ttotalCommas = rand(0, 2);\n\t} else {\n\t\ttotalCommas = rand(1, 4);\n\t}\n\n\tfor (let i = 0, pos, word; i < totalCommas; i++) {\n\t\tpos = rand(0, len - 2);\n\t\tif (!hasComma.test(words[pos])) {\n\t\t\twords[pos] += ',';\n\t\t}\n\t}\n\n\treturn words;\n}\n\n/**\n * Generate a paragraph of \"Lorem ipsum\" text\n * @param {Object} dict Words dictionary (see `lang/*.json`)\n * @param {Number} wordCount Words count in paragraph\n * @param {Boolean} startWithCommon Should paragraph start with common\n * \"lorem ipsum\" sentence.\n * @returns {String}\n */\nfunction paragraph(dict, wordCount, startWithCommon) {\n\tconst result = [];\n\tlet totalWords = 0;\n\tlet words;\n\n\tif (startWithCommon && dict.common) {\n\t\twords = dict.common.slice(0, wordCount);\n\t\ttotalWords += words.length;\n\t\tresult.push(sentence(insertCommas(words), '.'));\n\t}\n\n\twhile (totalWords < wordCount) {\n\t\twords = sample(dict.words, Math.min(rand(2, 30), wordCount - totalWords));\n\t\ttotalWords += words.length;\n\t\tresult.push(sentence(insertCommas(words)));\n\t}\n\n\treturn result.join(' ');\n}\n\n/**\n * Check if given node is in repeating context, e.g. node itself or one of its\n * parent is repeated\n * @param  {Node}  node\n * @return {Boolean}\n */\nfunction isRepeating(node) {\n    while (node.parent) {\n        if (node.repeat && node.repeat.value && node.repeat.value > 1) {\n            return true;\n        }\n\n        node = node.parent;\n    }\n\n    return false;\n}\n\nexport default index;\n","'use strict';\n\nimport defaultSnippets from '@emmetio/snippets';\nimport lorem from '@emmetio/lorem';\nimport SnippetsRegistry from '@emmetio/snippets-registry';\n\nconst reLorem = /^lorem([a-z]*)(\\d*)$/i;\n\n/**\n * Constructs a snippets registry, filled with snippets, for given options\n * @param  {String} syntax  Abbreviation syntax\n * @param  {Object|Object[]} snippets Additional snippets\n * @return {SnippetsRegistry}\n */\nexport default function(type, syntax, snippets) {\n\tconst registrySnippets = [];\n\n\tif (type === 'markup') {\n\t\tregistrySnippets.push(defaultSnippets.html);\n\t} else if (type === 'stylesheet') {\n\t\tregistrySnippets.push(defaultSnippets.css);\n\t}\n\n\tif (syntax in defaultSnippets && registrySnippets.indexOf(defaultSnippets[syntax]) === -1) {\n\t\tregistrySnippets.push(defaultSnippets[syntax]);\n\t}\n\n\tif (Array.isArray(snippets)) {\n\t\tsnippets.forEach(item => {\n\t\t\t// if array item is a string, treat it as a reference to globally\n\t\t\t// defined snippets\n\t\t\tregistrySnippets.push(typeof item === 'string' ? defaultSnippets[item] : item);\n\t\t});\n\t} else if (typeof snippets === 'object') {\n\t\tregistrySnippets.push(snippets);\n\t}\n\n\tconst registry = new SnippetsRegistry(registrySnippets.filter(Boolean));\n\n\t// for non-stylesheet syntaxes add Lorem Ipsum generator\n\tif (type !== 'stylesheet') {\n\t\tregistry.get(0).set(reLorem, loremGenerator);\n\t}\n\n\treturn registry;\n}\n\nfunction loremGenerator(node) {\n\tconst options = {};\n\tconst m = node.name.match(reLorem);\n\tif (m[1]) {\n\t\toptions.lang = m[1];\n\t}\n\n\tif (m[2]) {\n\t\toptions.wordCount = +m[2];\n\t}\n\n\treturn lorem(node, options);\n}\n","'use strict';\n\nimport Profile from '@emmetio/output-profile';\nimport SnippetsRegistry from '@emmetio/snippets-registry';\nimport { expand as htmlExpand, parse as htmlParse } from './lib/html';\nimport { expand as cssExpand,  parse as cssParse } from './lib/css';\nimport snippetsRegistryFactory from './lib/snippets-registry';\n\n/**\n * Default variables used in snippets to insert common values into predefined snippets\n * @type {Object}\n */\nconst defaultVariables = {\n\tlang: 'en',\n\tlocale: 'en-US',\n\tcharset: 'UTF-8'\n};\n\n/**\n * A list of syntaxes that should use Emmet CSS abbreviations:\n * a variations of default abbreviation that holds values right in abbreviation name\n * @type {Array}\n */\nconst stylesheetSyntaxes = ['css', 'sass', 'scss', 'less', 'stylus', 'sss'];\n\nconst defaultOptions = {\n\t/**\n\t * Type of abbreviation to parse: 'markup' or 'stylesheet'.\n\t * Can be auto-detected from `syntax` property. Default is 'markup'\n\t */\n\ttype: null,\n\n\t/**\n\t * Abbreviation output syntax\n\t * @type {String}\n\t */\n\tsyntax: 'html',\n\n\t/**\n\t * Field/tabstop generator for editor. Most editors support TextMate-style\n\t * fields: ${0} or ${1:item}. So for TextMate-style fields this function\n\t * will look like this:\n\t * @example\n\t * (index, placeholder) => `\\${${index}${placeholder ? ':' + placeholder : ''}}`\n\t *\n\t * @param  {Number} index         Placeholder index. Fields with the same indices\n\t * should be linked\n\t * @param  {String} [placeholder] Field placeholder\n\t * @return {String}\n\t */\n\tfield: (index, placeholder) => placeholder || '',\n\n\t/**\n\t * Insert given text string(s) into expanded abbreviation\n\t * If array of strings is given, the implicitly repeated element (e.g. `li*`)\n\t * will be repeated by the amount of items in array\n\t * @type {String|String[]}\n\t */\n\ttext: null,\n\n\t/**\n\t * Either predefined output profile or options for output profile. Used for\n\t * abbreviation output\n\t * @type {Profile|Object}\n\t */\n\tprofile: null,\n\n\t/**\n\t * Custom variables for variable resolver\n\t * @see @emmetio/variable-resolver\n\t * @type {Object}\n\t */\n\tvariables: {},\n\n\t/**\n\t * Custom predefined snippets for abbreviation. The expanded abbreviation\n\t * will try to match given snippets that may contain custom elements,\n\t * predefined attributes etc.\n\t * May also contain array of items: either snippets (Object) or references\n\t * to default syntax snippets (String; the key in default snippets hash)\n\t * @see @emmetio/snippets\n\t * @type {Object|SnippetsRegistry}\n\t */\n\tsnippets: {},\n\n\t/**\n\t * Hash of additional transformations that should be applied to expanded\n\t * abbreviation, like BEM or JSX. Since these transformations introduce\n\t * side-effect, they are disabled by default and should be enabled by\n\t * providing a transform name as a key and transform options as value:\n\t * @example\n\t * {\n\t *     bem: {element: '--'},\n\t *     jsx: true // no options, just enable transform\n\t * }\n\t * @see @emmetio/html-transform/lib/addons\n\t * @type {Object}\n\t */\n\toptions: null,\n\n\t/**\n\t * Additional options for syntax formatter\n\t * @see @emmetio/markup-formatters\n\t * @type {Object}\n\t */\n\tformat: null\n};\n\n/**\n * Expands given abbreviation into string, formatted according to provided\n * syntax and options\n * @param  {String|Node} abbr       Abbreviation string or parsed abbreviation tree\n * @param  {String|Object} [config] Parsing and formatting options (object) or\n * abbreviation syntax (string)\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = createOptions(config);\n\n\treturn getType(config.type, config.syntax) === 'stylesheet'\n\t\t? cssExpand(abbr, config)\n\t\t: htmlExpand(abbr, config);\n}\n\n/**\n * Parses given abbreviation into AST tree. This tree can be later formatted to\n * string with `expand` function\n * @param  {String} abbr             Abbreviation to parse\n * @param  {String|Object} [options] Parsing and formatting options (object) or\n * abbreviation syntax (string)\n * @return {Node}\n */\nexport function parse(abbr, options) {\n\toptions = createOptions(options);\n\n\treturn getType(options.type, options.syntax) === 'stylesheet'\n\t\t? cssParse(abbr, options)\n\t\t: htmlParse(abbr, options);\n}\n\n/**\n * Creates snippets registry for given syntax and additional `snippets`\n * @param  {String} type     Abbreviation type, 'markup' or 'stylesheet'\n * @param  {String} syntax   Snippets syntax, used for retrieving predefined snippets\n * @param  {SnippetsRegistry|Object|Object[]} [snippets] Additional snippets\n * @return {SnippetsRegistry}\n */\nexport function createSnippetsRegistry(type, syntax, snippets) {\n\t// Backward-compatibility with <0.6\n\tif (type && type !== 'markup' && type !== 'stylesheet') {\n\t\tsnippets = syntax;\n\t\tsyntax = type;\n\t\ttype = 'markup';\n\t}\n\n\treturn snippets instanceof SnippetsRegistry\n\t\t? snippets\n\t\t: snippetsRegistryFactory(type, syntax, snippets);\n}\n\nexport function createOptions(options) {\n\tif (typeof options === 'string') {\n\t\toptions = { syntax: options };\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\tif (options.type == null && options.syntax) {\n\t\toptions.type = isStylesheet(options.syntax) ? 'stylesheet' : 'markup';\n\t}\n\n\toptions.format = Object.assign({field: options.field}, options.format);\n\toptions.profile = createProfile(options);\n\toptions.variables = Object.assign({}, defaultVariables, options.variables);\n\toptions.snippets = createSnippetsRegistry(options.type, options.syntax, options.snippets);\n\n\treturn options;\n}\n\n/**\n * Check if given syntax belongs to stylesheet markup.\n * Emmet uses different abbreviation flavours: one is a default markup syntax,\n * used for HTML, Slim, Pug etc, the other one is used for stylesheets and\n * allows embedded values in abbreviation name\n * @param  {String}  syntax\n * @return {Boolean}\n */\nexport function isStylesheet(syntax) {\n\treturn stylesheetSyntaxes.indexOf(syntax) !== -1;\n}\n\n/**\n * Creates output profile from given options\n * @param  {Object} options\n * @return {Profile}\n */\nexport function createProfile(options) {\n\treturn options.profile instanceof Profile\n\t\t? options.profile\n\t\t: new Profile(options.profile);\n}\n\n/**\n * Returns type of abbreviation expander: either 'markup' or 'stylesheet'\n * @param {String} type\n * @param {String} [syntax]\n */\nfunction getType(type, syntax) {\n\tif (type) {\n\t\treturn type === 'stylesheet' ? 'stylesheet' : 'markup';\n\t}\n\n\treturn isStylesheet(syntax) ? 'stylesheet' : 'markup';\n}\n"],"names":["defaultOptions","ASTERISK","consumeRepeat","opt","consumeQuoted","TEXT_START","TEXT_END","ESCAPE","consumeText","EXCL","DOT","EQUALS","ATTR_OPEN","ATTR_CLOSE","reAttributeName","consumeAttributes","eatUnquoted","parseAttributeName","isUnquoted","HASH","DOT$1","SLASH","consumeElement","eatName","isName","GROUP_START","GROUP_END","OP_SIBLING","OP_CHILD","OP_CLIMB","parse","index","unroll","resolveImplicitTag","findDeepestNode","parseFields","splitByLines","format","parseAbbreviation","resolveSnippets","resolveVariables","transform","pad","DOLLAR","DOLLAR$1","COLON","DASH","DASH$1","isKeyword","resolveNode","isKeyword$1","supports","expand","html","css","xsl","isRoot","defaultSnippets","lorem","cssExpand","htmlExpand","cssParse","htmlParse"],"mappings":"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"}