{"version":3,"file":"expand.cjs.js","sources":["../lib/html.js","../lib/css.js","../lib/snippets-registry.js","../index.js"],"sourcesContent":["'use strict';\n\nimport parseAbbreviation from '@emmetio/abbreviation';\nimport resolveSnippets from '@emmetio/html-snippets-resolver';\nimport transform from '@emmetio/html-transform';\nimport resolveVariables from '@emmetio/variable-resolver';\nimport format from '@emmetio/markup-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = Object.assign({}, config);\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String} Abbreviation to parse\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\treturn parseAbbreviation(abbr)\n\t\t.use(resolveSnippets, config.snippets)\n\t\t.use(resolveVariables, config.variables)\n\t\t.use(transform, config.text, config.options);\n}\n","'use strict';\n\nimport parseAbbreviation from '@emmetio/css-abbreviation';\nimport resolveSnippets from '@emmetio/css-snippets-resolver';\nimport format from '@emmetio/stylesheet-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = config || {};\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String|Node} abbr Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\tif (typeof abbr === 'string') {\n\t\tabbr = parseAbbreviation(abbr);\n\t}\n\n\treturn abbr.use(resolveSnippets, config.snippets, config.options);\n}\n","'use strict';\n\nimport defaultSnippets from '@emmetio/snippets';\nimport lorem from '@emmetio/lorem';\nimport SnippetsRegistry from '@emmetio/snippets-registry';\n\nconst reLorem = /^lorem([a-z]*)(\\d*)$/i;\n\n/**\n * Constructs a snippets registry, filled with snippets, for given options\n * @param  {String} syntax  Abbreviation syntax\n * @param  {Object|Object[]} snippets Additional snippets\n * @return {SnippetsRegistry}\n */\nexport default function(type, syntax, snippets) {\n\tconst registrySnippets = [];\n\n\tif (type === 'markup') {\n\t\tregistrySnippets.push(defaultSnippets.html);\n\t} else if (type === 'stylesheet') {\n\t\tregistrySnippets.push(defaultSnippets.css);\n\t}\n\n\tif (syntax in defaultSnippets && registrySnippets.indexOf(defaultSnippets[syntax]) === -1) {\n\t\tregistrySnippets.push(defaultSnippets[syntax]);\n\t}\n\n\tif (Array.isArray(snippets)) {\n\t\tsnippets.forEach(item => {\n\t\t\t// if array item is a string, treat it as a reference to globally\n\t\t\t// defined snippets\n\t\t\tregistrySnippets.push(typeof item === 'string' ? defaultSnippets[item] : item);\n\t\t});\n\t} else if (typeof snippets === 'object') {\n\t\tregistrySnippets.push(snippets);\n\t}\n\n\tconst registry = new SnippetsRegistry(registrySnippets.filter(Boolean));\n\n\t// for non-stylesheet syntaxes add Lorem Ipsum generator\n\tif (type !== 'stylesheet') {\n\t\tregistry.get(0).set(reLorem, loremGenerator);\n\t}\n\n\treturn registry;\n}\n\nfunction loremGenerator(node) {\n\tconst options = {};\n\tconst m = node.name.match(reLorem);\n\tif (m[1]) {\n\t\toptions.lang = m[1];\n\t}\n\n\tif (m[2]) {\n\t\toptions.wordCount = +m[2];\n\t}\n\n\treturn lorem(node, options);\n}\n","'use strict';\n\nimport Profile from '@emmetio/output-profile';\nimport SnippetsRegistry from '@emmetio/snippets-registry';\nimport { expand as htmlExpand, parse as htmlParse } from './lib/html';\nimport { expand as cssExpand,  parse as cssParse } from './lib/css';\nimport snippetsRegistryFactory from './lib/snippets-registry';\n\n/**\n * Default variables used in snippets to insert common values into predefined snippets\n * @type {Object}\n */\nconst defaultVariables = {\n\tlang: 'en',\n\tlocale: 'en-US',\n\tcharset: 'UTF-8'\n};\n\n/**\n * A list of syntaxes that should use Emmet CSS abbreviations:\n * a variations of default abbreviation that holds values right in abbreviation name\n * @type {Array}\n */\nconst stylesheetSyntaxes = ['css', 'sass', 'scss', 'less', 'stylus', 'sss'];\n\nconst defaultOptions = {\n\t/**\n\t * Type of abbreviation to parse: 'markup' or 'stylesheet'.\n\t * Can be auto-detected from `syntax` property. Default is 'markup'\n\t */\n\ttype: null,\n\n\t/**\n\t * Abbreviation output syntax\n\t * @type {String}\n\t */\n\tsyntax: 'html',\n\n\t/**\n\t * Field/tabstop generator for editor. Most editors support TextMate-style\n\t * fields: ${0} or ${1:item}. So for TextMate-style fields this function\n\t * will look like this:\n\t * @example\n\t * (index, placeholder) => `\\${${index}${placeholder ? ':' + placeholder : ''}}`\n\t *\n\t * @param  {Number} index         Placeholder index. Fields with the same indices\n\t * should be linked\n\t * @param  {String} [placeholder] Field placeholder\n\t * @return {String}\n\t */\n\tfield: (index, placeholder) => placeholder || '',\n\n\t/**\n\t * Insert given text string(s) into expanded abbreviation\n\t * If array of strings is given, the implicitly repeated element (e.g. `li*`)\n\t * will be repeated by the amount of items in array\n\t * @type {String|String[]}\n\t */\n\ttext: null,\n\n\t/**\n\t * Either predefined output profile or options for output profile. Used for\n\t * abbreviation output\n\t * @type {Profile|Object}\n\t */\n\tprofile: null,\n\n\t/**\n\t * Custom variables for variable resolver\n\t * @see @emmetio/variable-resolver\n\t * @type {Object}\n\t */\n\tvariables: {},\n\n\t/**\n\t * Custom predefined snippets for abbreviation. The expanded abbreviation\n\t * will try to match given snippets that may contain custom elements,\n\t * predefined attributes etc.\n\t * May also contain array of items: either snippets (Object) or references\n\t * to default syntax snippets (String; the key in default snippets hash)\n\t * @see @emmetio/snippets\n\t * @type {Object|SnippetsRegistry}\n\t */\n\tsnippets: {},\n\n\t/**\n\t * Hash of additional transformations that should be applied to expanded\n\t * abbreviation, like BEM or JSX. Since these transformations introduce\n\t * side-effect, they are disabled by default and should be enabled by\n\t * providing a transform name as a key and transform options as value:\n\t * @example\n\t * {\n\t *     bem: {element: '--'},\n\t *     jsx: true // no options, just enable transform\n\t * }\n\t * @see @emmetio/html-transform/lib/addons\n\t * @type {Object}\n\t */\n\toptions: null,\n\n\t/**\n\t * Additional options for syntax formatter\n\t * @see @emmetio/markup-formatters\n\t * @type {Object}\n\t */\n\tformat: null\n};\n\n/**\n * Expands given abbreviation into string, formatted according to provided\n * syntax and options\n * @param  {String|Node} abbr       Abbreviation string or parsed abbreviation tree\n * @param  {String|Object} [config] Parsing and formatting options (object) or\n * abbreviation syntax (string)\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = createOptions(config);\n\n\treturn getType(config.type, config.syntax) === 'stylesheet'\n\t\t? cssExpand(abbr, config)\n\t\t: htmlExpand(abbr, config);\n}\n\n/**\n * Parses given abbreviation into AST tree. This tree can be later formatted to\n * string with `expand` function\n * @param  {String} abbr             Abbreviation to parse\n * @param  {String|Object} [options] Parsing and formatting options (object) or\n * abbreviation syntax (string)\n * @return {Node}\n */\nexport function parse(abbr, options) {\n\toptions = createOptions(options);\n\n\treturn getType(options.type, options.syntax) === 'stylesheet'\n\t\t? cssParse(abbr, options)\n\t\t: htmlParse(abbr, options);\n}\n\n/**\n * Creates snippets registry for given syntax and additional `snippets`\n * @param  {String} type     Abbreviation type, 'markup' or 'stylesheet'\n * @param  {String} syntax   Snippets syntax, used for retrieving predefined snippets\n * @param  {SnippetsRegistry|Object|Object[]} [snippets] Additional snippets\n * @return {SnippetsRegistry}\n */\nexport function createSnippetsRegistry(type, syntax, snippets) {\n\t// Backward-compatibility with <0.6\n\tif (type && type !== 'markup' && type !== 'stylesheet') {\n\t\tsnippets = syntax;\n\t\tsyntax = type;\n\t\ttype = 'markup';\n\t}\n\n\treturn snippets instanceof SnippetsRegistry\n\t\t? snippets\n\t\t: snippetsRegistryFactory(type, syntax, snippets);\n}\n\nexport function createOptions(options) {\n\tif (typeof options === 'string') {\n\t\toptions = { syntax: options };\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\tif (options.type == null && options.syntax) {\n\t\toptions.type = isStylesheet(options.syntax) ? 'stylesheet' : 'markup';\n\t}\n\n\toptions.format = Object.assign({field: options.field}, options.format);\n\toptions.profile = createProfile(options);\n\toptions.variables = Object.assign({}, defaultVariables, options.variables);\n\toptions.snippets = createSnippetsRegistry(options.type, options.syntax, options.snippets);\n\n\treturn options;\n}\n\n/**\n * Check if given syntax belongs to stylesheet markup.\n * Emmet uses different abbreviation flavours: one is a default markup syntax,\n * used for HTML, Slim, Pug etc, the other one is used for stylesheets and\n * allows embedded values in abbreviation name\n * @param  {String}  syntax\n * @return {Boolean}\n */\nexport function isStylesheet(syntax) {\n\treturn stylesheetSyntaxes.indexOf(syntax) !== -1;\n}\n\n/**\n * Creates output profile from given options\n * @param  {Object} options\n * @return {Profile}\n */\nexport function createProfile(options) {\n\treturn options.profile instanceof Profile\n\t\t? options.profile\n\t\t: new Profile(options.profile);\n}\n\n/**\n * Returns type of abbreviation expander: either 'markup' or 'stylesheet'\n * @param {String} type\n * @param {String} [syntax]\n */\nfunction getType(type, syntax) {\n\tif (type) {\n\t\treturn type === 'stylesheet' ? 'stylesheet' : 'markup';\n\t}\n\n\treturn isStylesheet(syntax) ? 'stylesheet' : 'markup';\n}\n"],"names":["expand","parse","format","parseAbbreviation","resolveSnippets","cssExpand","htmlExpand","cssParse","htmlParse"],"mappings":"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"}