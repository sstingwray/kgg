{"version":3,"file":"stylesheet-formatters.es.js","sources":["../format/css.js","../index.js"],"sourcesContent":["'use strict';\n\nimport render from '@emmetio/output-renderer';\nimport parseFields from '@emmetio/field-parser';\n\nconst defaultFormatOptions = {\n\tshortHex: true,\n\tbetween: ': ',\n\tafter: ';'\n};\n\n/**\n * Renders given parsed Emmet CSS abbreviation as CSS-like\n * stylesheet, formatted according to `profile` options\n * @param  {Node}     tree    Parsed Emmet abbreviation\n * @param  {Profile}  profile Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function css(tree, profile, options) {\n\toptions = options || {};\n\tconst formatOpt = Object.assign({}, defaultFormatOptions, options && options.format);\n\n\treturn render(tree, options.field, outNode => {\n\t\tconst node = outNode.node;\n\t\tlet value = stringifyValue(node, formatOpt);\n\n\t\tif (node.attributes.length) {\n\t\t\tconst fieldValues = node.attributes.map(attr => stringifyValue(attr, formatOpt));\n\t\t\tvalue = injectFields(value, fieldValues);\n\t\t}\n\n\t\toutNode.open = node.name && profile.name(node.name);\n\t\toutNode.afterOpen = formatOpt.between;\n\t\toutNode.text = outNode.renderFields(value || null);\n\n\t\tif (outNode.open && (!outNode.text || !outNode.text.endsWith(';'))) {\n\t\t\toutNode.afterText = formatOpt.after;\n\t\t}\n\n\t\tif (profile.get('format')) {\n\t\t\toutNode.newline = '\\n';\n\t\t\tif (tree.lastChild !== node) {\n\t\t\t\toutNode.afterText += outNode.newline;\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Injects given field values at each field of given string\n * @param  {String}   string\n * @param  {String[]} attributes\n * @return {FieldString}\n */\nfunction injectFields(string, values) {\n\tconst fieldsModel = parseFields(string);\n\tconst fieldsAmount = fieldsModel.fields.length;\n\n\tif (fieldsAmount) {\n\t\tvalues = values.slice();\n\t\tif (values.length > fieldsAmount) {\n\t\t\t// More values that output fields: collapse rest values into\n\t\t\t// a single token\n\t\t\tvalues = values.slice(0, fieldsAmount - 1)\n\t\t\t\t.concat(values.slice(fieldsAmount - 1).join(', '));\n\t\t}\n\n\t\twhile (values.length) {\n\t\t\tconst value = values.shift();\n\t\t\tconst field = fieldsModel.fields.shift();\n\t\t\tconst delta = value.length - field.length;\n\n\t\t\tfieldsModel.string = fieldsModel.string.slice(0, field.location)\n\t\t\t\t+ value\n\t\t\t\t+ fieldsModel.string.slice(field.location + field.length);\n\n\t\t\t// Update location of the rest fields in string\n\t\t\tfor (let i = 0, il = fieldsModel.fields.length; i < il; i++) {\n\t\t\t\tfieldsModel.fields[i].location += delta;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fieldsModel;\n}\n\nfunction stringifyValue(node, options) {\n\tif (node.value && typeof node.value === 'object' && node.value.type === 'css-value') {\n\t\treturn node.value.value\n\t\t.map(token => {\n\t\t\tif (token && typeof token === 'object') {\n\t\t\t\treturn token.type === 'color'\n\t\t\t\t\t? token.toString(options.shortHex)\n\t\t\t\t\t: token.toString();\n\t\t\t}\n\n\t\t\treturn String(token);\n\t\t})\n\t\t.join(' ');\n\t}\n\n\treturn node.value != null ? String(node.value) : '';\n}\n","'use strict';\n\nimport css from './format/css';\n\nconst syntaxFormat = {\n\tcss: {\n\t\tbetween: ': ',\n\t\tafter: ';'\n\t},\n\tscss: 'css',\n\tless: 'css',\n\tsass: {\n\t\tbetween: ': ',\n\t\tafter: ''\n\t},\n\tstylus: {\n\t\tbetween: ' ',\n\t\tafter: ''\n\t}\n};\n\n/**\n * Outputs given parsed abbreviation in specified stylesheet syntax\n * @param {Node}     tree     Parsed abbreviation tree\n * @param {Profile}  profile  Output profile\n * @param {String}   [syntax] Output syntax. If not given, `css` syntax is used\n * @param {Function} options.field A function to output field/tabstop for\n * host editor. This function takes two arguments: `index` and `placeholder` and\n * should return a string that represents tabstop in host editor. By default\n * only a placeholder is returned\n * @example\n * {\n * \tfield(index, placeholder) {\n * \t\t// return field in TextMate-style, e.g. ${1} or ${2:foo}\n * \t\treturn `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n *  }\n * }\n * @return {String}\n */\nexport default function(tree, profile, syntax, options) {\n\tif (typeof syntax === 'object') {\n\t\toptions = syntax;\n\t\tsyntax = null;\n\t}\n\n\tif (!supports(syntax)) {\n\t\t// fallback to CSS if given syntax is not supported\n\t\tsyntax = 'css';\n\t}\n\n\toptions = Object.assign({}, options, {\n\t\tformat: getFormat(syntax, options)\n\t});\n\n\t// CSS abbreviations doesnâ€™t support nesting so simply\n\t// output root node children\n\treturn css(tree, profile, options);\n}\n\n/**\n * Check if given syntax is supported\n * @param {String} syntax\n * @return {Boolean}\n */\nexport function supports(syntax) {\n\treturn !!syntax && syntax in syntaxFormat;\n}\n\n/**\n * Returns formatter object for given syntax\n * @param  {String} syntax\n * @param  {Object} [options]\n * @return {Object} Formatter object as defined in `syntaxFormat`\n */\nfunction getFormat(syntax, options) {\n\tlet format = syntaxFormat[syntax];\n\tif (typeof format === 'string') {\n\t\tformat = syntaxFormat[format];\n\t}\n\n\treturn Object.assign({}, format, options && options.format);\n}\n"],"names":[],"mappings":"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"}